<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Allen个人博客</title>
  
  <subtitle>hello world~</subtitle>
  <link href="http://cxinxian.github.io/atom.xml" rel="self"/>
  
  <link href="http://cxinxian.github.io/"/>
  <updated>2021-06-05T00:47:42.160Z</updated>
  <id>http://cxinxian.github.io/</id>
  
  <author>
    <name>Allen</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>抽象语法树的应用样例</title>
    <link href="http://cxinxian.github.io/2021/05/24/java-ast-2/"/>
    <id>http://cxinxian.github.io/2021/05/24/java-ast-2/</id>
    <published>2021-05-24T10:02:41.000Z</published>
    <updated>2021-06-05T00:47:42.160Z</updated>
    
    <content type="html"><![CDATA[<p>在上一篇文章<a href="2021/05/19/java-ast">java抽象语法树（AST）</a>中已经介绍了部分定义语法树的的节点，接下来在这篇将会通过样例代码以及注释介绍如何使用语法树节点来生成setter、getter、toString、hash、equal 等方法。</p><span id="more"></span><p>需要通过注解处理器生成 setter、getter、toString、hash、equal的类如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoC</span> &#123;</span><br><span class="line">    String var1;</span><br><span class="line">    String var2;</span><br><span class="line">    Integer tempInt;</span><br><span class="line">    Double tempDouble;</span><br><span class="line">    DemoA demoA;</span><br><span class="line">    <span class="type">int</span> temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>语法树的访问是通过继承 <code>TreeTranslator</code> ，并且重写了 visitClassDef 方法来实现访问 DemoC 类通过语法节点来访问 DemoC 中的变量。</p><h5 id="setter-方法生成样例"><a href="#setter-方法生成样例" class="headerlink" title="setter 方法生成样例"></a>setter 方法生成样例</h5><p>产生类似于 <code>public void setter(int a)&#123;this.a = a;&#125;  </code>的代码，需要用到的语法树节点分别有 JCModifiers、JCExpression、JCVariableDecl、JCStatement、JCBlock</p><p>定义 public  可以使用 <code>treeMaker.Modifiers(Flags.PUBLIC)</code></p><p>定义 void  返回类型可以这样使用 <code>treeMaker.TypeIdent(TypeTag.VOID)</code></p><p>定义方法名称 这可以 通过 Names 工具来实现，比如 <code>name.fromString(“setA”);</code>方法名中的大小写字母这些细节可以通过字符串截取其中一个字符来实现。</p><p>参数 的定义可以这样<code>treeMaker.VarDef(treeMaker.Modifiers(Flags.PARAMETER),jcVariableDecl.name,jcVariableDecl.vartype,null)</code>来实现。</p><p>最后 <code>this.xxx = xxx;</code> 语句的构建通过 <code>treeMaker.Exec(         treeMaker.Assign(             treeMaker.Select(treeMaker.Ident(names.fromString(&quot;this&quot;)),jcVariableDecl.name),             treeMaker.Ident(param.name)))</code></p><p>详细的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成 Setter 方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> jcVariableDecl</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> JCTree.JCMethodDecl <span class="title function_">makeSetterMethod</span><span class="params">(JCTree.JCVariableDecl jcVariableDecl)</span>&#123;</span><br><span class="line">    JCTree.<span class="type">JCModifiers</span> <span class="variable">modifiers</span> <span class="operator">=</span> treeMaker.Modifiers(Flags.PUBLIC);</span><br><span class="line">    <span class="comment">// 返回类型</span></span><br><span class="line">    JCTree.<span class="type">JCExpression</span> <span class="variable">returnType</span> <span class="operator">=</span> treeMaker.TypeIdent(TypeTag.VOID);</span><br><span class="line">    <span class="comment">// 方法名称</span></span><br><span class="line">    <span class="type">Name</span> <span class="variable">methodName</span> <span class="operator">=</span> getSetterMethod(jcVariableDecl);</span><br><span class="line">    <span class="comment">// 参数</span></span><br><span class="line">    List&lt;JCTree.JCVariableDecl&gt; jcVariableDeclList = List.nil();</span><br><span class="line">    JCTree.<span class="type">JCVariableDecl</span> <span class="variable">param</span> <span class="operator">=</span> treeMaker.VarDef(</span><br><span class="line">        treeMaker.Modifiers(Flags.PARAMETER),</span><br><span class="line">        jcVariableDecl.name,</span><br><span class="line">        jcVariableDecl.vartype,<span class="literal">null</span>);</span><br><span class="line">    <span class="comment">//设置形参这一句不能少，不然会编译报错(java.lang.AssertionError: Value of x -1)</span></span><br><span class="line">    param.pos = jcVariableDecl.pos; </span><br><span class="line">    jcVariableDeclList = jcVariableDeclList.append(param);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构建语句  //this.xxx = xxx;  setter方法中的赋值语句</span></span><br><span class="line">    JCTree.<span class="type">JCStatement</span> <span class="variable">statement</span> <span class="operator">=</span> treeMaker.Exec(</span><br><span class="line">        treeMaker.Assign(</span><br><span class="line">            treeMaker.Select(treeMaker.Ident(names.fromString(<span class="string">&quot;this&quot;</span>)),jcVariableDecl.name),</span><br><span class="line">            treeMaker.Ident(param.name)));</span><br><span class="line">    List&lt;JCTree.JCStatement&gt; statementList = List.nil();</span><br><span class="line">    statementList = statementList.append(statement);</span><br><span class="line"></span><br><span class="line">    JCTree.<span class="type">JCBlock</span> <span class="variable">jcBlock</span> <span class="operator">=</span> treeMaker.Block(<span class="number">0</span>,statementList);</span><br><span class="line">    <span class="comment">// 泛型参数</span></span><br><span class="line">    List&lt;JCTree.JCTypeParameter&gt; typeParameters = List.nil();</span><br><span class="line">    <span class="comment">// 异常抛出列表</span></span><br><span class="line">    List&lt;JCTree.JCExpression&gt; throwsClauses = List.nil();</span><br><span class="line">    JCTree.<span class="type">JCExpression</span> <span class="variable">defaultValue</span> <span class="operator">=</span> <span class="literal">null</span>;<span class="comment">//非自定义注解类中的方法，defaultValue为null</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构建settter 方法</span></span><br><span class="line">    JCTree.<span class="type">JCMethodDecl</span> <span class="variable">jcMethodDecl</span> <span class="operator">=</span> treeMaker.MethodDef(modifiers,</span><br><span class="line">                                                           methodName,</span><br><span class="line">                                                           returnType,</span><br><span class="line">                                                           typeParameters,</span><br><span class="line">                                                           jcVariableDeclList,</span><br><span class="line">                                                           throwsClauses,</span><br><span class="line">                                                           jcBlock,defaultValue);</span><br><span class="line">    <span class="keyword">return</span> jcMethodDecl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="getter-方法生成样例"><a href="#getter-方法生成样例" class="headerlink" title="getter 方法生成样例"></a>getter 方法生成样例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成Getter 方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> jcVariableDecl</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> JCTree.JCMethodDecl <span class="title function_">makeGetterMethod</span><span class="params">(JCTree.JCVariableDecl jcVariableDecl)</span>&#123;</span><br><span class="line">    JCTree.<span class="type">JCModifiers</span> <span class="variable">modifiers</span> <span class="operator">=</span> treeMaker.Modifiers(Flags.PUBLIC);</span><br><span class="line">    JCTree.<span class="type">JCExpression</span> <span class="variable">returnType</span> <span class="operator">=</span> jcVariableDecl.vartype;</span><br><span class="line">    <span class="comment">// 方法名</span></span><br><span class="line">    <span class="type">Name</span> <span class="variable">methodName</span> <span class="operator">=</span> getGetterMethod(jcVariableDecl);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构建语句 this.var</span></span><br><span class="line">    JCTree.<span class="type">JCStatement</span> <span class="variable">statement</span> <span class="operator">=</span> treeMaker.Return(</span><br><span class="line">            treeMaker.Select(</span><br><span class="line">                    treeMaker.Ident(</span><br><span class="line">                            names.fromString(<span class="string">&quot;this&quot;</span>)),jcVariableDecl.name));</span><br><span class="line"></span><br><span class="line">    List&lt;JCTree.JCStatement&gt; statementList = List.nil();</span><br><span class="line">    statementList = statementList.append(statement);</span><br><span class="line">    <span class="comment">// 构建代码块</span></span><br><span class="line">    JCTree.<span class="type">JCBlock</span> <span class="variable">jcBlock</span> <span class="operator">=</span> treeMaker.Block(<span class="number">0</span>,statementList);</span><br><span class="line">    <span class="comment">// 泛型参数列表</span></span><br><span class="line">    List&lt;JCTree.JCTypeParameter&gt; typeParameters = List.nil();</span><br><span class="line">    <span class="comment">// 参数类型</span></span><br><span class="line">    List&lt;JCTree.JCVariableDecl&gt; jcVariableDeclList = List.nil();</span><br><span class="line">    <span class="comment">// 异常抛出列表</span></span><br><span class="line">    List&lt;JCTree.JCExpression&gt; throwsClauses  = List.nil();</span><br><span class="line">    JCTree.<span class="type">JCExpression</span> <span class="variable">defaultValue</span> <span class="operator">=</span> <span class="literal">null</span>;<span class="comment">//非自定义注解类中的方法，defaultValue为null</span></span><br><span class="line"></span><br><span class="line">    JCTree.<span class="type">JCMethodDecl</span> <span class="variable">jcMethodDecl</span> <span class="operator">=</span> treeMaker.MethodDef(modifiers,</span><br><span class="line">                                                           methodName,</span><br><span class="line">                                                           returnType,</span><br><span class="line">                                                           typeParameters,</span><br><span class="line">                                                           jcVariableDeclList,</span><br><span class="line">                                                           throwsClauses,jcBlock,defaultValue);</span><br><span class="line">    <span class="keyword">return</span> jcMethodDecl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="toString-方法生成"><a href="#toString-方法生成" class="headerlink" title="toString 方法生成"></a>toString 方法生成</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成 toString 方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> jcClassDecl</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> JCTree.JCMethodDecl <span class="title function_">makeToStringMethod</span><span class="params">(JCTree.JCClassDecl jcClassDecl)</span>&#123;</span><br><span class="line"></span><br><span class="line">    List&lt;JCTree.JCVariableDecl&gt; vars = List.nil();</span><br><span class="line">    List&lt;JCTree&gt; jcTreeList = jcClassDecl.defs;</span><br><span class="line">    <span class="keyword">for</span> (JCTree jcTree: jcTreeList)&#123;</span><br><span class="line">        <span class="keyword">if</span> (jcTree <span class="keyword">instanceof</span> JCTree.JCVariableDecl)&#123;</span><br><span class="line">            JCTree.<span class="type">JCVariableDecl</span> <span class="variable">var</span> <span class="operator">=</span> (JCTree.JCVariableDecl) jcTree;</span><br><span class="line">            vars = vars.append(<span class="keyword">var</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    List&lt;JCTree.JCAnnotation&gt; jcAnnotationList = List.nil();</span><br><span class="line">    <span class="comment">// 方法注解</span></span><br><span class="line">    JCTree.<span class="type">JCAnnotation</span> <span class="variable">jcAnnotation</span> <span class="operator">=</span> treeMaker.Annotation(memberAccess(<span class="string">&quot;java.lang.Override&quot;</span>),</span><br><span class="line">                                                            List.nil());</span><br><span class="line">    jcAnnotationList = jcAnnotationList.append(jcAnnotation);</span><br><span class="line">    JCTree.<span class="type">JCModifiers</span> <span class="variable">jcModifiers</span> <span class="operator">=</span> treeMaker.Modifiers(Flags.PUBLIC,jcAnnotationList); <span class="comment">// 方法修饰词</span></span><br><span class="line">    JCTree.<span class="type">JCExpression</span> <span class="variable">returnType</span> <span class="operator">=</span> memberAccess(<span class="string">&quot;java.lang.String&quot;</span>); <span class="comment">// 返回类型</span></span><br><span class="line">    <span class="type">Name</span> <span class="variable">name</span> <span class="operator">=</span> names.fromString(<span class="string">&quot;toString&quot;</span>); <span class="comment">// 方法名</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &quot;DemoC&#123;</span></span><br><span class="line">    JCTree.<span class="type">JCExpression</span> <span class="variable">jcExpression</span> <span class="operator">=</span> treeMaker.Literal(jcClassDecl.name + <span class="string">&quot;&#123;&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;vars.size(); i++)&#123;</span><br><span class="line">        JCTree.<span class="type">JCVariableDecl</span> <span class="variable">var</span> <span class="operator">=</span> vars.get(i);</span><br><span class="line">        <span class="keyword">if</span> (i!=<span class="number">0</span>)&#123;</span><br><span class="line">            jcExpression = treeMaker.Binary(JCTree.Tag.PLUS,</span><br><span class="line">                                            jcExpression,</span><br><span class="line">                                            treeMaker.Literal(<span class="string">&quot;,&quot;</span> + <span class="keyword">var</span>.name.toString()+<span class="string">&quot;=&quot;</span>));</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 构建语句  var=</span></span><br><span class="line">            jcExpression = treeMaker.Binary(JCTree.Tag.PLUS,</span><br><span class="line">                                            jcExpression,</span><br><span class="line">                                            treeMaker.Literal(<span class="keyword">var</span>.name.toString()+<span class="string">&quot;=&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">var</span>.vartype.toString().contains(<span class="string">&quot;String&quot;</span>))&#123;</span><br><span class="line">            <span class="comment">// var=&#x27;&quot;+</span></span><br><span class="line">            jcExpression = treeMaker.Binary(JCTree.Tag.PLUS,jcExpression,treeMaker.Literal(<span class="string">&quot;&#x27;&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// var=&#x27;&quot;+var</span></span><br><span class="line">        jcExpression = treeMaker.Binary(JCTree.Tag.PLUS,jcExpression,treeMaker.Ident(<span class="keyword">var</span>.name));</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">var</span>.vartype.toString().contains(<span class="string">&quot;String&quot;</span>))&#123;</span><br><span class="line">            <span class="comment">// var=&#x27;&quot;+var+&#x27;&quot;</span></span><br><span class="line">            jcExpression = treeMaker.Binary(JCTree.Tag.PLUS,jcExpression,treeMaker.Literal(<span class="string">&quot;&#x27;&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    jcExpression = treeMaker.Binary(JCTree.Tag.PLUS,jcExpression,treeMaker.Literal(<span class="string">&quot;&#125;&quot;</span>));</span><br><span class="line"></span><br><span class="line">    JCTree.<span class="type">JCStatement</span> <span class="variable">jcStatement</span> <span class="operator">=</span> treeMaker.Return(jcExpression);</span><br><span class="line">    List&lt;JCTree.JCStatement&gt; statementList = List.nil();</span><br><span class="line">    statementList = statementList.append(jcStatement);</span><br><span class="line">    JCTree.<span class="type">JCBlock</span> <span class="variable">jcBlock</span> <span class="operator">=</span> treeMaker.Block(<span class="number">0</span>,statementList);</span><br><span class="line">    <span class="comment">// 参数列表</span></span><br><span class="line">    List&lt;JCTree.JCVariableDecl&gt; variableDecls = List.nil();</span><br><span class="line">    <span class="comment">// 形参列表</span></span><br><span class="line">    List&lt;JCTree.JCTypeParameter&gt; jcTypeParameters = List.nil();</span><br><span class="line">    <span class="comment">// 异常列表</span></span><br><span class="line">    List&lt;JCTree.JCExpression&gt; throwableList = List.nil();</span><br><span class="line">    JCTree.<span class="type">JCExpression</span> <span class="variable">defaultValue</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    JCTree.<span class="type">JCMethodDecl</span> <span class="variable">jcMethodDecl</span> <span class="operator">=</span> treeMaker.MethodDef(jcModifiers,</span><br><span class="line">                                                           name,</span><br><span class="line">                                                           returnType,</span><br><span class="line">                                                           jcTypeParameters,</span><br><span class="line">                                                           variableDecls,</span><br><span class="line">                                                           throwableList,jcBlock,defaultValue);</span><br><span class="line">    <span class="keyword">return</span> jcMethodDecl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="hash-方法生成"><a href="#hash-方法生成" class="headerlink" title="hash 方法生成"></a>hash 方法生成</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成 hash 方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> classDecl</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> JCTree.JCMethodDecl <span class="title function_">makeHashMethodDecl</span><span class="params">(JCTree.JCClassDecl classDecl)</span>&#123;</span><br><span class="line">    List&lt;JCTree.JCVariableDecl&gt; jcVariableDeclList = List.nil();</span><br><span class="line">    List&lt;JCTree&gt; jcTreeList = classDecl.defs;</span><br><span class="line">    <span class="keyword">for</span> (JCTree jcTree : jcTreeList)&#123;</span><br><span class="line">        <span class="keyword">if</span> (jcTree <span class="keyword">instanceof</span> JCTree.JCVariableDecl)&#123;</span><br><span class="line">            JCTree.<span class="type">JCVariableDecl</span> <span class="variable">jcVariableDecl</span> <span class="operator">=</span> (JCTree.JCVariableDecl) jcTree;</span><br><span class="line">            jcVariableDeclList = jcVariableDeclList.append(jcVariableDecl);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Override 方法注解</span></span><br><span class="line">    JCTree.<span class="type">JCAnnotation</span> <span class="variable">jcAnnotation</span> <span class="operator">=</span> treeMaker.Annotation(memberAccess(<span class="string">&quot;java.lang.Override&quot;</span>),</span><br><span class="line">                                                            List.nil());</span><br><span class="line">    List&lt;JCTree.JCAnnotation&gt; jcAnnotationList = List.nil();</span><br><span class="line">    jcAnnotationList = jcAnnotationList.append(jcAnnotation);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修饰方法关键字</span></span><br><span class="line">    JCTree.<span class="type">JCModifiers</span> <span class="variable">jcModifiers</span> <span class="operator">=</span> treeMaker.Modifiers(Flags.PUBLIC,jcAnnotationList);</span><br><span class="line">    <span class="comment">// 返回类型</span></span><br><span class="line">    JCTree.<span class="type">JCExpression</span> <span class="variable">returnType</span> <span class="operator">=</span> treeMaker.TypeIdent(TypeTag.INT);</span><br><span class="line">    <span class="comment">// 方法名称</span></span><br><span class="line">    <span class="type">Name</span> <span class="variable">methodName</span> <span class="operator">=</span> names.fromString(<span class="string">&quot;hashCode&quot;</span>);</span><br><span class="line">    <span class="comment">// 异常</span></span><br><span class="line">    List&lt;JCTree.JCExpression&gt; throwableList = List.nil();</span><br><span class="line">    <span class="comment">// 方法体</span></span><br><span class="line">    List&lt;JCTree.JCExpression&gt; var1 = List.nil();</span><br><span class="line">    List&lt;JCTree.JCExpression&gt; var2 = List.nil();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (JCTree.JCVariableDecl jcVariableDecl : jcVariableDeclList)&#123;</span><br><span class="line">        <span class="comment">//var1 = var1.append(typeTranslator(jcVariableDecl.vartype));</span></span><br><span class="line">        var2 = var2.append(treeMaker.Ident(jcVariableDecl.name));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    JCTree.<span class="type">JCExpression</span> <span class="variable">jcExpression</span> <span class="operator">=</span> treeMaker.Apply(var1,</span><br><span class="line">                                                       memberAccess(<span class="string">&quot;java.util.Objects.hash&quot;</span>),var2);</span><br><span class="line">    JCTree.<span class="type">JCStatement</span> <span class="variable">jcStatement</span> <span class="operator">=</span> treeMaker.Return(jcExpression);</span><br><span class="line">    List&lt;JCTree.JCStatement&gt; jcStatementList = List.nil();</span><br><span class="line">    jcStatementList = jcStatementList.append(jcStatement);</span><br><span class="line"></span><br><span class="line">    JCTree.<span class="type">JCBlock</span> <span class="variable">jcBlock</span> <span class="operator">=</span> treeMaker.Block(<span class="number">0</span>,jcStatementList);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 泛型变量</span></span><br><span class="line">    List&lt;JCTree.JCTypeParameter&gt; jcTypeParameterList = List.nil();</span><br><span class="line">    <span class="comment">// 变量列表</span></span><br><span class="line">    List&lt;JCTree.JCVariableDecl&gt; variableDeclList = List.nil();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    JCTree.<span class="type">JCExpression</span> <span class="variable">defaultValue</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    JCTree.<span class="type">JCMethodDecl</span> <span class="variable">jcMethodDecl</span> <span class="operator">=</span> treeMaker.MethodDef(jcModifiers,</span><br><span class="line">                                                           methodName,</span><br><span class="line">                                                           returnType,</span><br><span class="line">                                                           jcTypeParameterList,</span><br><span class="line">                                                           variableDeclList,</span><br><span class="line">                                                           throwableList,jcBlock,defaultValue);</span><br><span class="line">    <span class="keyword">return</span> jcMethodDecl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="equal-方法生成"><a href="#equal-方法生成" class="headerlink" title="equal 方法生成"></a>equal 方法生成</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成 equal 方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> classDecl</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> JCTree.JCMethodDecl <span class="title function_">makeEqualsMethod</span><span class="params">(JCTree.JCClassDecl classDecl)</span>&#123;</span><br><span class="line"></span><br><span class="line">    JCTree.<span class="type">JCExpression</span> <span class="variable">extend</span> <span class="operator">=</span>  classDecl.extending;</span><br><span class="line">    <span class="comment">// 提取类中定义的变量</span></span><br><span class="line">    List&lt;JCTree&gt; jcTreeList = classDecl.defs;</span><br><span class="line">    List&lt;JCTree.JCVariableDecl&gt; jcVariableDeclList = List.nil();</span><br><span class="line">    <span class="keyword">for</span> (JCTree jcTree : jcTreeList)&#123;</span><br><span class="line">        <span class="keyword">if</span> (jcTree <span class="keyword">instanceof</span> JCTree.JCVariableDecl)&#123;</span><br><span class="line">            JCTree.<span class="type">JCVariableDecl</span> <span class="variable">var</span> <span class="operator">=</span> (JCTree.JCVariableDecl) jcTree;</span><br><span class="line">            jcVariableDeclList = jcVariableDeclList.append(<span class="keyword">var</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 方法注解</span></span><br><span class="line">    JCTree.<span class="type">JCAnnotation</span> <span class="variable">jcAnnotation</span> <span class="operator">=</span> treeMaker.Annotation(memberAccess(<span class="string">&quot;java.lang.Override&quot;</span>),List.nil());</span><br><span class="line">    List&lt;JCTree.JCAnnotation&gt; jcAnnotationList = List.nil();</span><br><span class="line">    jcAnnotationList = jcAnnotationList.append(jcAnnotation);</span><br><span class="line">    <span class="comment">// 方法关键修饰</span></span><br><span class="line">    JCTree.<span class="type">JCModifiers</span> <span class="variable">jcModifiers</span> <span class="operator">=</span> treeMaker.Modifiers(Flags.PUBLIC,jcAnnotationList);</span><br><span class="line">    <span class="comment">// 返回类型</span></span><br><span class="line">    JCTree.<span class="type">JCExpression</span> <span class="variable">retrunType</span> <span class="operator">=</span> treeMaker.TypeIdent(TypeTag.BOOLEAN);</span><br><span class="line">    <span class="comment">// 方法名称</span></span><br><span class="line">    <span class="type">Name</span> <span class="variable">methodName</span> <span class="operator">=</span> names.fromString(<span class="string">&quot;equals&quot;</span>);</span><br><span class="line">    <span class="comment">// 泛型参数</span></span><br><span class="line">    List&lt;JCTree.JCTypeParameter&gt; jcTypeParameters = List.nil();</span><br><span class="line">    <span class="comment">// 参数列表</span></span><br><span class="line">    List&lt;JCTree.JCVariableDecl&gt; variableDecls = List.nil();</span><br><span class="line">    JCTree.<span class="type">JCVariableDecl</span> <span class="variable">param</span> <span class="operator">=</span> treeMaker.VarDef(treeMaker.Modifiers(Flags.PARAMETER),</span><br><span class="line">            names.fromString(<span class="string">&quot;o&quot;</span>),memberAccess(<span class="string">&quot;java.lang.Object&quot;</span>),<span class="literal">null</span>);</span><br><span class="line">    param.pos = classDecl.pos;</span><br><span class="line">    variableDecls = variableDecls.append(param);</span><br><span class="line">    <span class="comment">// 异常列表</span></span><br><span class="line">    List&lt;JCTree.JCExpression&gt; throwableList = List.nil();</span><br><span class="line">    <span class="comment">// 开始构建方法体</span></span><br><span class="line">    <span class="comment">//if (this == o) return true;</span></span><br><span class="line">    List&lt;JCTree.JCStatement&gt; jcStatements = List.nil();</span><br><span class="line">    JCTree.<span class="type">JCIf</span> <span class="variable">seqzero</span> <span class="operator">=</span> treeMaker.If(treeMaker.Binary(JCTree.Tag.EQ,treeMaker.Ident(names.fromString(<span class="string">&quot;this&quot;</span>)),treeMaker.Ident(names.fromString(<span class="string">&quot;o&quot;</span>)))</span><br><span class="line">            ,treeMaker.Return(treeMaker.Literal(<span class="literal">true</span>)),<span class="literal">null</span>);</span><br><span class="line">    jcStatements = jcStatements.append(seqzero);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// if (o == null || getClass() != o.getClass()) return false;</span></span><br><span class="line">    JCTree.<span class="type">JCExpression</span> <span class="variable">getClassEqCondition</span> <span class="operator">=</span> treeMaker.Apply(List.nil(),treeMaker.Select(treeMaker.Ident(names.fromString(<span class="string">&quot;this&quot;</span>)),names.fromString(<span class="string">&quot;getClass&quot;</span>)),List.nil());</span><br><span class="line">    JCTree.<span class="type">JCExpression</span> <span class="variable">vargetClassEqCondition</span> <span class="operator">=</span> treeMaker.Apply(List.nil(),treeMaker.Select(treeMaker.Ident(names.fromString(<span class="string">&quot;o&quot;</span>)),names.fromString(<span class="string">&quot;getClass&quot;</span>)),List.nil());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    JCTree.<span class="type">JCIf</span> <span class="variable">seqone</span> <span class="operator">=</span> treeMaker.If(</span><br><span class="line">        treeMaker.Binary(JCTree.Tag.OR,</span><br><span class="line">                         treeMaker.Binary(</span><br><span class="line">                             JCTree.Tag.EQ,</span><br><span class="line">                             treeMaker.Ident(</span><br><span class="line">                                 names.fromString(<span class="string">&quot;o&quot;</span>)),</span><br><span class="line">                             treeMaker.Literal(TypeTag.BOT,<span class="literal">null</span>))</span><br><span class="line">            ,treeMaker.Binary(JCTree.Tag.NE,getClassEqCondition,vargetClassEqCondition))</span><br><span class="line">            ,treeMaker.Return(treeMaker.Literal(<span class="literal">false</span>)),<span class="literal">null</span>);</span><br><span class="line">           </span><br><span class="line">    jcStatements = jcStatements.append(seqone);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// BeanTreeTranslator that = (BeanTreeTranslator) o;</span></span><br><span class="line">    JCTree.<span class="type">JCVariableDecl</span> <span class="variable">jcVariableDecl</span> <span class="operator">=</span> treeMaker.VarDef(</span><br><span class="line">        treeMaker.Modifiers(<span class="number">0</span>),names.fromString(</span><br><span class="line">            toLowerCaseFirstOne(classDecl.name.toString()))</span><br><span class="line">            ,treeMaker.Ident(classDecl.name)</span><br><span class="line">            ,treeMaker.TypeCast(</span><br><span class="line">                treeMaker.Ident(classDecl.name),treeMaker.Ident(names.fromString(<span class="string">&quot;o&quot;</span>))</span><br><span class="line">            )</span><br><span class="line">    );</span><br><span class="line">    jcStatements = jcStatements.append(jcVariableDecl);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// return Objects.equals(messager, that.messager) &amp;&amp;</span></span><br><span class="line">    <span class="comment">//                Objects.equals(treeMaker, that.treeMaker) &amp;&amp;</span></span><br><span class="line">    <span class="comment">//                Objects.equals(names, that.names) &amp;&amp;</span></span><br><span class="line">    <span class="comment">//                Objects.equals(tep, that.tep);</span></span><br><span class="line">    JCTree.<span class="type">JCExpression</span> <span class="variable">jcExpression</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">for</span> (JCTree.JCVariableDecl <span class="keyword">var</span> : jcVariableDeclList)&#123;</span><br><span class="line">        List&lt;JCTree.JCExpression&gt; varType = List.nil();</span><br><span class="line">        List&lt;JCTree.JCExpression&gt; varList = List.nil();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//varType = varType.append(var.vartype);</span></span><br><span class="line">        varList = varList.append(treeMaker.Ident(<span class="keyword">var</span>.name));</span><br><span class="line">        varList = varList.append(</span><br><span class="line">            treeMaker.Select(</span><br><span class="line">                treeMaker.Ident(</span><br><span class="line">                    names.fromString(toLowerCaseFirstOne(classDecl.name.toString()))),<span class="keyword">var</span>.name));</span><br><span class="line">        <span class="comment">// treeMaker.Apply 调用的是 JCMethodInvocation </span></span><br><span class="line">        JCTree.<span class="type">JCExpression</span> <span class="variable">expression</span> <span class="operator">=</span> treeMaker.Apply(</span><br><span class="line">            varType,memberAccess(<span class="string">&quot;java.util.Objects.equals&quot;</span>),varList);</span><br><span class="line">        <span class="keyword">if</span> (jcExpression==<span class="literal">null</span>)&#123;</span><br><span class="line">            jcExpression = expression;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            jcExpression = treeMaker.Binary(JCTree.Tag.AND,jcExpression,expression);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    JCTree.<span class="type">JCStatement</span> <span class="variable">jcStatement</span> <span class="operator">=</span> treeMaker.Return(jcExpression);</span><br><span class="line">    jcStatements = jcStatements.append(jcStatement);</span><br><span class="line">    JCTree.<span class="type">JCBlock</span> <span class="variable">jcBlock</span> <span class="operator">=</span> treeMaker.Block(<span class="number">0</span>,jcStatements);</span><br><span class="line"></span><br><span class="line">    JCTree.<span class="type">JCExpression</span> <span class="variable">defaultValue</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    JCTree.<span class="type">JCMethodDecl</span> <span class="variable">jcMethodDecl</span> <span class="operator">=</span> treeMaker.MethodDef(jcModifiers,methodName,</span><br><span class="line">                                                           retrunType,jcTypeParameters,</span><br><span class="line">                                                           variableDecls,throwableList,</span><br><span class="line">                                                           jcBlock,defaultValue);</span><br><span class="line">    <span class="keyword">return</span> jcMethodDecl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后整个语法树生成代码的测试样例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.tools.javac.code.Flags;</span><br><span class="line"><span class="keyword">import</span> com.sun.tools.javac.code.TypeTag;</span><br><span class="line"><span class="keyword">import</span> com.sun.tools.javac.tree.JCTree;</span><br><span class="line"><span class="keyword">import</span> com.sun.tools.javac.tree.TreeMaker;</span><br><span class="line"><span class="keyword">import</span> com.sun.tools.javac.tree.TreeTranslator;</span><br><span class="line"><span class="keyword">import</span> com.sun.tools.javac.util.List;</span><br><span class="line"><span class="keyword">import</span> com.sun.tools.javac.util.Name;</span><br><span class="line"><span class="keyword">import</span> com.sun.tools.javac.util.Names;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.processing.Messager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeanTreeTranslator</span> <span class="keyword">extends</span> <span class="title class_">TreeTranslator</span> &#123;</span><br><span class="line"></span><br><span class="line">    Messager messager;</span><br><span class="line">    TreeMaker treeMaker;</span><br><span class="line">    Names names;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BeanTreeTranslator</span><span class="params">(TreeMaker treeMaker,Messager messager,Names names)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.treeMaker = treeMaker;</span><br><span class="line">        <span class="built_in">this</span>.messager = messager;</span><br><span class="line">        <span class="built_in">this</span>.names = names;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">visitBlock</span><span class="params">(JCTree.JCBlock jcBlock)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.visitBlock(jcBlock);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">visitClassDef</span><span class="params">(JCTree.JCClassDecl jcClassDecl)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.visitClassDef(jcClassDecl);</span><br><span class="line">        List&lt;JCTree&gt; jcTreeList = jcClassDecl.defs;</span><br><span class="line">        <span class="keyword">for</span> (JCTree jcTree : jcClassDecl.defs)&#123;</span><br><span class="line">            <span class="keyword">if</span> (jcTree <span class="keyword">instanceof</span> JCTree.JCVariableDecl)&#123;</span><br><span class="line">                JCTree.<span class="type">JCVariableDecl</span> <span class="variable">jcVariableDecl</span> <span class="operator">=</span> (JCTree.JCVariableDecl) jcTree;</span><br><span class="line">                jcClassDecl.defs = jcClassDecl.defs.append(makeGetterMethod(jcVariableDecl));</span><br><span class="line">                jcClassDecl.defs = jcClassDecl.defs.append(makeSetterMethod(jcVariableDecl));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// toString 方法</span></span><br><span class="line">        JCTree.<span class="type">JCMethodDecl</span> <span class="variable">toStringMethod</span> <span class="operator">=</span> makeToStringMethod(jcClassDecl);</span><br><span class="line">        jcClassDecl.defs = jcClassDecl.defs.append(toStringMethod);</span><br><span class="line">        <span class="comment">// hash 方法</span></span><br><span class="line">        JCTree.<span class="type">JCMethodDecl</span> <span class="variable">hashMethod</span> <span class="operator">=</span> makeHashMethodDecl(jcClassDecl);</span><br><span class="line">        jcClassDecl.defs = jcClassDecl.defs.append(hashMethod);</span><br><span class="line">        <span class="comment">// equal 方法</span></span><br><span class="line">        JCTree.<span class="type">JCMethodDecl</span> <span class="variable">equalMethod</span> <span class="operator">=</span> makeEqualsMethod(jcClassDecl);</span><br><span class="line">        jcClassDecl.defs = jcClassDecl.defs.append(equalMethod);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成Getter 方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jcVariableDecl</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> JCTree.JCMethodDecl <span class="title function_">makeGetterMethod</span><span class="params">(JCTree.JCVariableDecl jcVariableDecl)</span>&#123;</span><br><span class="line">        JCTree.<span class="type">JCModifiers</span> <span class="variable">modifiers</span> <span class="operator">=</span> treeMaker.Modifiers(Flags.PUBLIC);</span><br><span class="line">        JCTree.<span class="type">JCExpression</span> <span class="variable">returnType</span> <span class="operator">=</span> jcVariableDecl.vartype;</span><br><span class="line">        <span class="comment">// 方法名</span></span><br><span class="line">        <span class="type">Name</span> <span class="variable">methodName</span> <span class="operator">=</span> getGetterMethod(jcVariableDecl);</span><br><span class="line">        <span class="comment">// 构建语句</span></span><br><span class="line">        JCTree.<span class="type">JCStatement</span> <span class="variable">statement</span> <span class="operator">=</span> treeMaker.Return(</span><br><span class="line">                treeMaker.Select(</span><br><span class="line">                        treeMaker.Ident(</span><br><span class="line">                                names.fromString(<span class="string">&quot;this&quot;</span>)),jcVariableDecl.name));</span><br><span class="line"></span><br><span class="line">        List&lt;JCTree.JCStatement&gt; statementList = List.nil();</span><br><span class="line">        statementList = statementList.append(statement);</span><br><span class="line">        <span class="comment">// 构建代码块</span></span><br><span class="line">        JCTree.<span class="type">JCBlock</span> <span class="variable">jcBlock</span> <span class="operator">=</span> treeMaker.Block(<span class="number">0</span>,statementList);</span><br><span class="line">        <span class="comment">// 泛型参数列表</span></span><br><span class="line">        List&lt;JCTree.JCTypeParameter&gt; typeParameters = List.nil();</span><br><span class="line">        <span class="comment">// 参数类型</span></span><br><span class="line">        List&lt;JCTree.JCVariableDecl&gt; jcVariableDeclList = List.nil();</span><br><span class="line">        <span class="comment">// 异常抛出列表</span></span><br><span class="line">        List&lt;JCTree.JCExpression&gt; throwsClauses  = List.nil();</span><br><span class="line">        <span class="comment">//非自定义注解类中的方法，defaultValue为null</span></span><br><span class="line">        JCTree.<span class="type">JCExpression</span> <span class="variable">defaultValue</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        JCTree.<span class="type">JCMethodDecl</span> <span class="variable">jcMethodDecl</span> <span class="operator">=</span> treeMaker.MethodDef(modifiers,</span><br><span class="line">                                                               methodName,returnType,typeParameters,</span><br><span class="line">                jcVariableDeclList,throwsClauses,jcBlock,defaultValue);</span><br><span class="line">        <span class="keyword">return</span> jcMethodDecl;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成 Setter 方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jcVariableDecl</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> JCTree.JCMethodDecl <span class="title function_">makeSetterMethod</span><span class="params">(JCTree.JCVariableDecl jcVariableDecl)</span>&#123;</span><br><span class="line">        JCTree.<span class="type">JCModifiers</span> <span class="variable">modifiers</span> <span class="operator">=</span> treeMaker.Modifiers(Flags.PUBLIC);</span><br><span class="line">        <span class="comment">// 返回类型</span></span><br><span class="line">        JCTree.<span class="type">JCExpression</span> <span class="variable">returnType</span> <span class="operator">=</span> treeMaker.TypeIdent(TypeTag.VOID);</span><br><span class="line">        <span class="comment">// 方法名称</span></span><br><span class="line">        <span class="type">Name</span> <span class="variable">methodName</span> <span class="operator">=</span> getSetterMethod(jcVariableDecl);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 参数</span></span><br><span class="line">        List&lt;JCTree.JCVariableDecl&gt; jcVariableDeclList = List.nil();</span><br><span class="line">        JCTree.<span class="type">JCVariableDecl</span> <span class="variable">param</span> <span class="operator">=</span> treeMaker.VarDef(treeMaker.Modifiers(Flags.PARAMETER),</span><br><span class="line">                                                       jcVariableDecl.name,</span><br><span class="line">                                                       jcVariableDecl.vartype,<span class="literal">null</span>);</span><br><span class="line">        param.pos = jcVariableDecl.pos; <span class="comment">//设置形参这一句不能少，不然会编译报错(java.lang.AssertionError: Value of x -1)</span></span><br><span class="line">        jcVariableDeclList = jcVariableDeclList.append(param);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构建语句  //this.xxx = xxx;  setter方法中的赋值语句</span></span><br><span class="line">        JCTree.<span class="type">JCStatement</span> <span class="variable">statement</span> <span class="operator">=</span> treeMaker.Exec(</span><br><span class="line">                treeMaker.Assign(</span><br><span class="line">                        treeMaker.Select(treeMaker.Ident(</span><br><span class="line">                            names.fromString(<span class="string">&quot;this&quot;</span>)),jcVariableDecl.name),</span><br><span class="line">                        treeMaker.Ident(param.name)));</span><br><span class="line">        List&lt;JCTree.JCStatement&gt; statementList = List.nil();</span><br><span class="line">        statementList = statementList.append(statement);</span><br><span class="line"></span><br><span class="line">        JCTree.<span class="type">JCBlock</span> <span class="variable">jcBlock</span> <span class="operator">=</span> treeMaker.Block(<span class="number">0</span>,statementList);</span><br><span class="line">        <span class="comment">// 泛型参数</span></span><br><span class="line">        List&lt;JCTree.JCTypeParameter&gt; typeParameters = List.nil();</span><br><span class="line">        <span class="comment">// 异常抛出列表</span></span><br><span class="line">        List&lt;JCTree.JCExpression&gt; throwsClauses = List.nil();</span><br><span class="line">        JCTree.<span class="type">JCExpression</span> <span class="variable">defaultValue</span> <span class="operator">=</span> <span class="literal">null</span>;<span class="comment">//非自定义注解类中的方法，defaultValue为null</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构建settter 方法</span></span><br><span class="line">        JCTree.<span class="type">JCMethodDecl</span> <span class="variable">jcMethodDecl</span> <span class="operator">=</span> treeMaker.MethodDef(modifiers,methodName,returnType,</span><br><span class="line">                typeParameters,jcVariableDeclList,throwsClauses,jcBlock,defaultValue);</span><br><span class="line">        <span class="keyword">return</span> jcMethodDecl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成 toString 方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jcClassDecl</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> JCTree.JCMethodDecl <span class="title function_">makeToStringMethod</span><span class="params">(JCTree.JCClassDecl jcClassDecl)</span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;JCTree.JCVariableDecl&gt; vars = List.nil();</span><br><span class="line">        List&lt;JCTree&gt; jcTreeList = jcClassDecl.defs;</span><br><span class="line">        <span class="keyword">for</span> (JCTree jcTree: jcTreeList)&#123;</span><br><span class="line">            <span class="keyword">if</span> (jcTree <span class="keyword">instanceof</span> JCTree.JCVariableDecl)&#123;</span><br><span class="line">                JCTree.<span class="type">JCVariableDecl</span> <span class="variable">var</span> <span class="operator">=</span> (JCTree.JCVariableDecl) jcTree;</span><br><span class="line">                vars = vars.append(<span class="keyword">var</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;JCTree.JCAnnotation&gt; jcAnnotationList = List.nil();</span><br><span class="line">        <span class="comment">// 方法注解</span></span><br><span class="line">        JCTree.<span class="type">JCAnnotation</span> <span class="variable">jcAnnotation</span> <span class="operator">=</span> treeMaker.Annotation(</span><br><span class="line">            memberAccess(<span class="string">&quot;java.lang.Override&quot;</span>),List.nil());</span><br><span class="line">        jcAnnotationList = jcAnnotationList.append(jcAnnotation);</span><br><span class="line">        JCTree.<span class="type">JCModifiers</span> <span class="variable">jcModifiers</span> <span class="operator">=</span> treeMaker.Modifiers(Flags.PUBLIC,jcAnnotationList); <span class="comment">// 方法修饰词</span></span><br><span class="line">        JCTree.<span class="type">JCExpression</span> <span class="variable">returnType</span> <span class="operator">=</span> memberAccess(<span class="string">&quot;java.lang.String&quot;</span>); <span class="comment">// 返回类型</span></span><br><span class="line">        <span class="type">Name</span> <span class="variable">name</span> <span class="operator">=</span> names.fromString(<span class="string">&quot;toString&quot;</span>); <span class="comment">// 方法名</span></span><br><span class="line"></span><br><span class="line">        JCTree.<span class="type">JCExpression</span> <span class="variable">jcExpression</span> <span class="operator">=</span> treeMaker.Literal(jcClassDecl.name + <span class="string">&quot;&#123;&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;vars.size(); i++)&#123;</span><br><span class="line">            JCTree.<span class="type">JCVariableDecl</span> <span class="variable">var</span> <span class="operator">=</span> vars.get(i);</span><br><span class="line">            <span class="keyword">if</span> (i!=<span class="number">0</span>)&#123;</span><br><span class="line">                jcExpression = treeMaker.Binary(</span><br><span class="line">                    JCTree.Tag.PLUS,jcExpression,treeMaker.Literal(<span class="string">&quot;,&quot;</span> + <span class="keyword">var</span>.name.toString()+<span class="string">&quot;=&quot;</span>));</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                jcExpression = treeMaker.Binary(</span><br><span class="line">                    JCTree.Tag.PLUS,jcExpression,treeMaker.Literal(<span class="keyword">var</span>.name.toString()+<span class="string">&quot;=&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">var</span>.vartype.toString().contains(<span class="string">&quot;String&quot;</span>))&#123;</span><br><span class="line">                jcExpression = treeMaker.Binary(JCTree.Tag.PLUS,jcExpression,treeMaker.Literal(<span class="string">&quot;&#x27;&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            jcExpression = treeMaker.Binary(JCTree.Tag.PLUS,jcExpression,treeMaker.Ident(<span class="keyword">var</span>.name));</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">var</span>.vartype.toString().contains(<span class="string">&quot;String&quot;</span>))&#123;</span><br><span class="line">                jcExpression = treeMaker.Binary(JCTree.Tag.PLUS,jcExpression,treeMaker.Literal(<span class="string">&quot;&#x27;&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        jcExpression = treeMaker.Binary(JCTree.Tag.PLUS,jcExpression,treeMaker.Literal(<span class="string">&quot;&#125;&quot;</span>));</span><br><span class="line"></span><br><span class="line">        JCTree.<span class="type">JCStatement</span> <span class="variable">jcStatement</span> <span class="operator">=</span> treeMaker.Return(jcExpression);</span><br><span class="line">        List&lt;JCTree.JCStatement&gt; statementList = List.nil();</span><br><span class="line">        statementList = statementList.append(jcStatement);</span><br><span class="line">        JCTree.<span class="type">JCBlock</span> <span class="variable">jcBlock</span> <span class="operator">=</span> treeMaker.Block(<span class="number">0</span>,statementList);</span><br><span class="line">        <span class="comment">// 参数列表</span></span><br><span class="line">        List&lt;JCTree.JCVariableDecl&gt; variableDecls = List.nil();</span><br><span class="line">        <span class="comment">// 形参列表</span></span><br><span class="line">        List&lt;JCTree.JCTypeParameter&gt; jcTypeParameters = List.nil();</span><br><span class="line">        <span class="comment">// 异常列表</span></span><br><span class="line">        List&lt;JCTree.JCExpression&gt; throwableList = List.nil();</span><br><span class="line">        JCTree.<span class="type">JCExpression</span> <span class="variable">defaultValue</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        JCTree.<span class="type">JCMethodDecl</span> <span class="variable">jcMethodDecl</span> <span class="operator">=</span> treeMaker.MethodDef(jcModifiers,</span><br><span class="line">                                                               name,returnType,</span><br><span class="line">                                                               jcTypeParameters,</span><br><span class="line">                                                               variableDecls,</span><br><span class="line">                                                               throwableList,jcBlock,defaultValue);</span><br><span class="line">        <span class="keyword">return</span> jcMethodDecl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成 hash 方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> classDecl</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> JCTree.JCMethodDecl <span class="title function_">makeHashMethodDecl</span><span class="params">(JCTree.JCClassDecl classDecl)</span>&#123;</span><br><span class="line">        List&lt;JCTree.JCVariableDecl&gt; jcVariableDeclList = List.nil();</span><br><span class="line">        List&lt;JCTree&gt; jcTreeList = classDecl.defs;</span><br><span class="line">        <span class="keyword">for</span> (JCTree jcTree : jcTreeList)&#123;</span><br><span class="line">            <span class="keyword">if</span> (jcTree <span class="keyword">instanceof</span> JCTree.JCVariableDecl)&#123;</span><br><span class="line">                JCTree.<span class="type">JCVariableDecl</span> <span class="variable">jcVariableDecl</span> <span class="operator">=</span> (JCTree.JCVariableDecl) jcTree;</span><br><span class="line">                jcVariableDeclList = jcVariableDeclList.append(jcVariableDecl);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Override 方法注解</span></span><br><span class="line">        JCTree.<span class="type">JCAnnotation</span> <span class="variable">jcAnnotation</span> <span class="operator">=</span> treeMaker.Annotation(</span><br><span class="line">            memberAccess(<span class="string">&quot;java.lang.Override&quot;</span>),List.nil());</span><br><span class="line">        List&lt;JCTree.JCAnnotation&gt; jcAnnotationList = List.nil();</span><br><span class="line">        jcAnnotationList = jcAnnotationList.append(jcAnnotation);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 修饰方法关键字</span></span><br><span class="line">        JCTree.<span class="type">JCModifiers</span> <span class="variable">jcModifiers</span> <span class="operator">=</span> treeMaker.Modifiers(Flags.PUBLIC,jcAnnotationList);</span><br><span class="line">        <span class="comment">// 返回类型</span></span><br><span class="line">        JCTree.<span class="type">JCExpression</span> <span class="variable">returnType</span> <span class="operator">=</span> treeMaker.TypeIdent(TypeTag.INT);</span><br><span class="line">        <span class="comment">// 方法名称</span></span><br><span class="line">        <span class="type">Name</span> <span class="variable">methodName</span> <span class="operator">=</span> names.fromString(<span class="string">&quot;hashCode&quot;</span>);</span><br><span class="line">        <span class="comment">// 异常</span></span><br><span class="line">        List&lt;JCTree.JCExpression&gt; throwableList = List.nil();</span><br><span class="line">        <span class="comment">// 方法体</span></span><br><span class="line">        List&lt;JCTree.JCExpression&gt; var1 = List.nil();</span><br><span class="line">        List&lt;JCTree.JCExpression&gt; var2 = List.nil();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (JCTree.JCVariableDecl jcVariableDecl : jcVariableDeclList)&#123;</span><br><span class="line">            <span class="comment">//var1 = var1.append(typeTranslator(jcVariableDecl.vartype));</span></span><br><span class="line">            var2 = var2.append(treeMaker.Ident(jcVariableDecl.name));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        JCTree.<span class="type">JCExpression</span> <span class="variable">jcExpression</span> <span class="operator">=</span> treeMaker.Apply(var1,</span><br><span class="line">                                                           memberAccess(<span class="string">&quot;java.util.Objects.hash&quot;</span>),</span><br><span class="line">                                                           var2);</span><br><span class="line">        JCTree.<span class="type">JCStatement</span> <span class="variable">jcStatement</span> <span class="operator">=</span> treeMaker.Return(jcExpression);</span><br><span class="line">        List&lt;JCTree.JCStatement&gt; jcStatementList = List.nil();</span><br><span class="line">        jcStatementList = jcStatementList.append(jcStatement);</span><br><span class="line"></span><br><span class="line">        JCTree.<span class="type">JCBlock</span> <span class="variable">jcBlock</span> <span class="operator">=</span> treeMaker.Block(<span class="number">0</span>,jcStatementList);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 泛型变量</span></span><br><span class="line">        List&lt;JCTree.JCTypeParameter&gt; jcTypeParameterList = List.nil();</span><br><span class="line">        <span class="comment">// 变量列表</span></span><br><span class="line">        List&lt;JCTree.JCVariableDecl&gt; variableDeclList = List.nil();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        JCTree.<span class="type">JCExpression</span> <span class="variable">defaultValue</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        JCTree.<span class="type">JCMethodDecl</span> <span class="variable">jcMethodDecl</span> <span class="operator">=</span> treeMaker.MethodDef(jcModifiers,</span><br><span class="line">                                                               methodName,</span><br><span class="line">                                                               returnType,jcTypeParameterList,</span><br><span class="line">                variableDeclList,throwableList,jcBlock,defaultValue);</span><br><span class="line">        <span class="keyword">return</span> jcMethodDecl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成 equal 方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> classDecl</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> JCTree.JCMethodDecl <span class="title function_">makeEqualsMethod</span><span class="params">(JCTree.JCClassDecl classDecl)</span>&#123;</span><br><span class="line"></span><br><span class="line">        JCTree.<span class="type">JCExpression</span> <span class="variable">extend</span> <span class="operator">=</span>  classDecl.extending;</span><br><span class="line">        <span class="comment">// 提取类中定义的变量</span></span><br><span class="line">        List&lt;JCTree&gt; jcTreeList = classDecl.defs;</span><br><span class="line">        List&lt;JCTree.JCVariableDecl&gt; jcVariableDeclList = List.nil();</span><br><span class="line">        <span class="keyword">for</span> (JCTree jcTree : jcTreeList)&#123;</span><br><span class="line">            <span class="keyword">if</span> (jcTree <span class="keyword">instanceof</span> JCTree.JCVariableDecl)&#123;</span><br><span class="line">                JCTree.<span class="type">JCVariableDecl</span> <span class="variable">var</span> <span class="operator">=</span> (JCTree.JCVariableDecl) jcTree;</span><br><span class="line">                jcVariableDeclList = jcVariableDeclList.append(<span class="keyword">var</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 方法注解</span></span><br><span class="line">        JCTree.<span class="type">JCAnnotation</span> <span class="variable">jcAnnotation</span> <span class="operator">=</span> treeMaker.Annotation(</span><br><span class="line">            memberAccess(<span class="string">&quot;java.lang.Override&quot;</span>),List.nil());</span><br><span class="line">        List&lt;JCTree.JCAnnotation&gt; jcAnnotationList = List.nil();</span><br><span class="line">        jcAnnotationList = jcAnnotationList.append(jcAnnotation);</span><br><span class="line">        <span class="comment">// 方法关键修饰</span></span><br><span class="line">        JCTree.<span class="type">JCModifiers</span> <span class="variable">jcModifiers</span> <span class="operator">=</span> treeMaker.Modifiers(Flags.PUBLIC,jcAnnotationList);</span><br><span class="line">        <span class="comment">// 返回类型</span></span><br><span class="line">        JCTree.<span class="type">JCExpression</span> <span class="variable">retrunType</span> <span class="operator">=</span> treeMaker.TypeIdent(TypeTag.BOOLEAN);</span><br><span class="line">        <span class="comment">// 方法名称</span></span><br><span class="line">        <span class="type">Name</span> <span class="variable">methodName</span> <span class="operator">=</span> names.fromString(<span class="string">&quot;equals&quot;</span>);</span><br><span class="line">        <span class="comment">// 泛型参数</span></span><br><span class="line">        List&lt;JCTree.JCTypeParameter&gt; jcTypeParameters = List.nil();</span><br><span class="line">        <span class="comment">// 参数列表</span></span><br><span class="line">        List&lt;JCTree.JCVariableDecl&gt; variableDecls = List.nil();</span><br><span class="line">        JCTree.<span class="type">JCVariableDecl</span> <span class="variable">param</span> <span class="operator">=</span> treeMaker.VarDef(treeMaker.Modifiers(Flags.PARAMETER),</span><br><span class="line">                names.fromString(<span class="string">&quot;o&quot;</span>),memberAccess(<span class="string">&quot;java.lang.Object&quot;</span>),<span class="literal">null</span>);</span><br><span class="line">        param.pos = classDecl.pos;</span><br><span class="line">        variableDecls = variableDecls.append(param);</span><br><span class="line">        <span class="comment">// 异常列表</span></span><br><span class="line">        List&lt;JCTree.JCExpression&gt; throwableList = List.nil();</span><br><span class="line">        <span class="comment">// 开始构建方法体</span></span><br><span class="line">        <span class="comment">//if (this == o) return true;</span></span><br><span class="line">        List&lt;JCTree.JCStatement&gt; jcStatements = List.nil();</span><br><span class="line">        JCTree.<span class="type">JCIf</span> <span class="variable">seqzero</span> <span class="operator">=</span> treeMaker.If(treeMaker.Binary(</span><br><span class="line">            JCTree.Tag.EQ,</span><br><span class="line">            treeMaker.Ident(names.fromString(<span class="string">&quot;this&quot;</span>)),</span><br><span class="line">            treeMaker.Ident(names.fromString(<span class="string">&quot;o&quot;</span>)))</span><br><span class="line">                ,treeMaker.Return(treeMaker.Literal(<span class="literal">true</span>)),<span class="literal">null</span>);</span><br><span class="line">        jcStatements = jcStatements.append(seqzero);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// if (o == null || getClass() != o.getClass()) return false;</span></span><br><span class="line">        JCTree.<span class="type">JCExpression</span> <span class="variable">getClassEqCondition</span> <span class="operator">=</span> treeMaker.Apply(List.nil(),</span><br><span class="line">                                                                  treeMaker.Select(</span><br><span class="line">                                                                      treeMaker.Ident</span><br><span class="line">                                                                      (names.fromString(<span class="string">&quot;this&quot;</span>)),</span><br><span class="line">                                                                      names.fromString(<span class="string">&quot;getClass&quot;</span>)),</span><br><span class="line">                                                                  List.nil());</span><br><span class="line">        JCTree.<span class="type">JCExpression</span> <span class="variable">vargetClassEqCondition</span> <span class="operator">=</span> treeMaker.Apply(List.nil(),</span><br><span class="line">                                                                     treeMaker.Select(</span><br><span class="line">                                                                         treeMaker.Ident(</span><br><span class="line">                                                                             names.fromString(<span class="string">&quot;o&quot;</span>)),</span><br><span class="line">                                                                         names.fromString(<span class="string">&quot;getClass&quot;</span>)),</span><br><span class="line">                                                                     List.nil());</span><br><span class="line"></span><br><span class="line">        JCTree.<span class="type">JCIf</span> <span class="variable">seqone</span> <span class="operator">=</span> treeMaker.If(treeMaker.Binary(JCTree.Tag.OR</span><br><span class="line">                ,treeMaker.Binary(JCTree.Tag.EQ,</span><br><span class="line">                                  treeMaker.Ident(</span><br><span class="line">                                      names.fromString(<span class="string">&quot;o&quot;</span>)),treeMaker.Literal(TypeTag.BOT,<span class="literal">null</span>))</span><br><span class="line">                ,treeMaker.Binary(JCTree.Tag.NE,getClassEqCondition,vargetClassEqCondition))</span><br><span class="line">                ,treeMaker.Return(treeMaker.Literal(<span class="literal">false</span>)),<span class="literal">null</span>);</span><br><span class="line">               </span><br><span class="line">        jcStatements = jcStatements.append(seqone);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// BeanTreeTranslator that = (BeanTreeTranslator) o;</span></span><br><span class="line">        JCTree.<span class="type">JCVariableDecl</span> <span class="variable">jcVariableDecl</span> <span class="operator">=</span> treeMaker.VarDef(treeMaker.Modifiers(<span class="number">0</span>),</span><br><span class="line">                                                                names.fromString(</span><br><span class="line">                                                                    toLowerCaseFirstOne(</span><br><span class="line">                                                                        classDecl.name.toString()))</span><br><span class="line">                ,treeMaker.Ident(classDecl.name)</span><br><span class="line">                ,treeMaker.TypeCast(treeMaker.Ident(classDecl.name),</span><br><span class="line">                                    treeMaker.Ident(names.fromString(<span class="string">&quot;o&quot;</span>))) );</span><br><span class="line">        jcStatements = jcStatements.append(jcVariableDecl);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// return Objects.equals(messager, that.messager) &amp;&amp;</span></span><br><span class="line">        <span class="comment">//                Objects.equals(treeMaker, that.treeMaker) &amp;&amp;</span></span><br><span class="line">        <span class="comment">//                Objects.equals(names, that.names) &amp;&amp;</span></span><br><span class="line">        <span class="comment">//                Objects.equals(tep, that.tep);</span></span><br><span class="line">        JCTree.<span class="type">JCExpression</span> <span class="variable">jcExpression</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (JCTree.JCVariableDecl <span class="keyword">var</span> : jcVariableDeclList)&#123;</span><br><span class="line">            List&lt;JCTree.JCExpression&gt; varType = List.nil();</span><br><span class="line">            List&lt;JCTree.JCExpression&gt; varList = List.nil();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//varType = varType.append(var.vartype);</span></span><br><span class="line">            varList = varList.append(treeMaker.Ident(<span class="keyword">var</span>.name));</span><br><span class="line">            varList = varList.append(treeMaker.Select(</span><br><span class="line">                treeMaker.Ident(names.fromString(</span><br><span class="line">                    toLowerCaseFirstOne(classDecl.name.toString()))),<span class="keyword">var</span>.name));</span><br><span class="line">            JCTree.<span class="type">JCExpression</span> <span class="variable">expression</span> <span class="operator">=</span> treeMaker.Apply(varType,</span><br><span class="line">                                                             memberAccess(<span class="string">&quot;java.util.Objects.equals&quot;</span>),</span><br><span class="line">                                                             varList);</span><br><span class="line">            <span class="keyword">if</span> (jcExpression==<span class="literal">null</span>)&#123;</span><br><span class="line">                jcExpression = expression;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                jcExpression = treeMaker.Binary(JCTree.Tag.AND,jcExpression,expression);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        JCTree.<span class="type">JCStatement</span> <span class="variable">jcStatement</span> <span class="operator">=</span> treeMaker.Return(jcExpression);</span><br><span class="line">        jcStatements = jcStatements.append(jcStatement);</span><br><span class="line">        JCTree.<span class="type">JCBlock</span> <span class="variable">jcBlock</span> <span class="operator">=</span> treeMaker.Block(<span class="number">0</span>,jcStatements);</span><br><span class="line"></span><br><span class="line">        JCTree.<span class="type">JCExpression</span> <span class="variable">defaultValue</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        JCTree.<span class="type">JCMethodDecl</span> <span class="variable">jcMethodDecl</span> <span class="operator">=</span> treeMaker.MethodDef(jcModifiers,methodName,</span><br><span class="line">                                                               retrunType,</span><br><span class="line">                                                               jcTypeParameters,</span><br><span class="line">                                                               variableDecls,</span><br><span class="line">                                                               throwableList,jcBlock,defaultValue);</span><br><span class="line">        <span class="keyword">return</span> jcMethodDecl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//传入一个类的全路径名，获取对应类的JCIdent</span></span><br><span class="line">    <span class="keyword">private</span> JCTree.JCExpression <span class="title function_">memberAccess</span><span class="params">(String components)</span> &#123;</span><br><span class="line">        String[] componentArray = components.split(<span class="string">&quot;\\.&quot;</span>);</span><br><span class="line">        JCTree.<span class="type">JCExpression</span> <span class="variable">expr</span> <span class="operator">=</span> treeMaker.Ident(names.fromString(componentArray[<span class="number">0</span>]));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; componentArray.length; i++) &#123;</span><br><span class="line">            expr = treeMaker.Select(expr, names.fromString(componentArray[i]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> expr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//装箱</span></span><br><span class="line">    <span class="keyword">private</span> JCTree.JCExpression <span class="title function_">typeTranslator</span><span class="params">(JCTree.JCExpression type)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (type.toString().equals(<span class="string">&quot;int&quot;</span>))&#123;</span><br><span class="line">            type = memberAccess(<span class="string">&quot;java.lang.Integer&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (type.toString().equals(<span class="string">&quot;long&quot;</span>))&#123;</span><br><span class="line">            type = memberAccess(<span class="string">&quot;java.lang.Long&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(type.toString().equals(<span class="string">&quot;short&quot;</span>))&#123;</span><br><span class="line">            type = memberAccess(<span class="string">&quot;java.lang.Short&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(type.toString().equals(<span class="string">&quot;double&quot;</span>))&#123;</span><br><span class="line">            type = memberAccess(<span class="string">&quot;java.lang.Double&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(type.toString().equals(<span class="string">&quot;boolean&quot;</span>))&#123;</span><br><span class="line">            type = memberAccess(<span class="string">&quot;java.lang.Boolean&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(type.toString().equals(<span class="string">&quot;float&quot;</span>))&#123;</span><br><span class="line">            type = memberAccess(<span class="string">&quot;java.lang.Float&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(type.toString().equals(<span class="string">&quot;char&quot;</span>))&#123;</span><br><span class="line">            type = memberAccess(<span class="string">&quot;java.lang.Character&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(type.toString().equals(<span class="string">&quot;byte&quot;</span>))&#123;</span><br><span class="line">            type = memberAccess(<span class="string">&quot;java.lang.Byte&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> type;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//首字母转小写</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">toLowerCaseFirstOne</span><span class="params">(String s)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(Character.isLowerCase(s.charAt(<span class="number">0</span>)))</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">new</span> <span class="title class_">StringBuilder</span>()).append(Character.toLowerCase(s.charAt(<span class="number">0</span>)))</span><br><span class="line">            .append(s.substring(<span class="number">1</span>)).toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据变量名称生成 getXxx 方法名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jcVariableDecl</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Name <span class="title function_">getGetterMethod</span><span class="params">(JCTree.JCVariableDecl jcVariableDecl)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">varName</span> <span class="operator">=</span> jcVariableDecl.name.toString();</span><br><span class="line">        <span class="type">Name</span> <span class="variable">methodName</span> <span class="operator">=</span> names.fromString(<span class="string">&quot;get&quot;</span>+varName.substring(<span class="number">0</span>,<span class="number">1</span>).toUpperCase()+</span><br><span class="line">                                           varName.substring(<span class="number">1</span>,varName.length()));</span><br><span class="line">        <span class="keyword">return</span> methodName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据变量名称生成 setXxx 方法名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jcVariableDecl</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Name <span class="title function_">getSetterMethod</span><span class="params">(JCTree.JCVariableDecl jcVariableDecl)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">varName</span> <span class="operator">=</span> jcVariableDecl.name.toString();</span><br><span class="line">        <span class="type">Name</span> <span class="variable">methodName</span> <span class="operator">=</span> names.fromString(<span class="string">&quot;set&quot;</span>+varName.substring(<span class="number">0</span>,<span class="number">1</span>).toUpperCase()+</span><br><span class="line">                                           varName.substring(<span class="number">1</span>,varName.length()));</span><br><span class="line">        <span class="keyword">return</span> methodName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后的编译生成的字节码结果如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoC</span> &#123;</span><br><span class="line">    String var1;</span><br><span class="line">    String var2;</span><br><span class="line">    Integer tempInt;</span><br><span class="line">    Double tempDouble;</span><br><span class="line">    DemoA demoA;</span><br><span class="line">    <span class="type">int</span> temp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DemoC</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getVar1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.var1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setVar1</span><span class="params">(String var1)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.var1 = var1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getVar2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.var2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setVar2</span><span class="params">(String var2)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.var2 = var2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getTempInt</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.tempInt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTempInt</span><span class="params">(Integer tempInt)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.tempInt = tempInt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Double <span class="title function_">getTempDouble</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.tempDouble;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTempDouble</span><span class="params">(Double tempDouble)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.tempDouble = tempDouble;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> DemoA <span class="title function_">getDemoA</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.demoA;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDemoA</span><span class="params">(DemoA demoA)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.demoA = demoA;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getTemp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTemp</span><span class="params">(<span class="type">int</span> temp)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.temp = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;DemoC&#123;var1=&#x27;&quot;</span> + <span class="built_in">this</span>.var1 + <span class="string">&quot;&#x27;&quot;</span> + <span class="string">&quot;,var2=&quot;</span> + <span class="string">&quot;&#x27;&quot;</span> + <span class="built_in">this</span>.var2 + <span class="string">&quot;&#x27;&quot;</span> + <span class="string">&quot;,tempInt=&quot;</span> + <span class="built_in">this</span>.tempInt + <span class="string">&quot;,tempDouble=&quot;</span> + <span class="built_in">this</span>.tempDouble + <span class="string">&quot;,demoA=&quot;</span> + <span class="built_in">this</span>.demoA + <span class="string">&quot;,temp=&quot;</span> + <span class="built_in">this</span>.temp + <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="built_in">this</span>.var1, <span class="built_in">this</span>.var2, <span class="built_in">this</span>.tempInt, <span class="built_in">this</span>.tempDouble, <span class="built_in">this</span>.demoA, <span class="built_in">this</span>.temp&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == o) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (o != <span class="literal">null</span> &amp;&amp; <span class="built_in">this</span>.getClass() == o.getClass()) &#123;</span><br><span class="line">            <span class="type">DemoC</span> <span class="variable">demoC</span> <span class="operator">=</span> (DemoC)o;</span><br><span class="line">            <span class="keyword">return</span> Objects.equals(<span class="built_in">this</span>.var1, demoC.var1) &amp;&amp; Objects.equals(<span class="built_in">this</span>.var2, demoC.var2) &amp;&amp; Objects.equals(<span class="built_in">this</span>.tempInt, demoC.tempInt) &amp;&amp; Objects.equals(<span class="built_in">this</span>.tempDouble, demoC.tempDouble) &amp;&amp; Objects.equals(<span class="built_in">this</span>.demoA, demoC.demoA) &amp;&amp; Objects.equals(<span class="built_in">this</span>.temp, demoC.temp);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;在上一篇文章&lt;a href=&quot;2021/05/19/java-ast&quot;&gt;java抽象语法树（AST）&lt;/a&gt;中已经介绍了部分定义语法树的的节点，接下来在这篇将会通过样例代码以及注释介绍如何使用语法树节点来生成setter、getter、toString、hash、equal 等方法。&lt;/p&gt;</summary>
    
    
    
    
    <category term="java" scheme="http://cxinxian.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>java抽象语法树（AST）</title>
    <link href="http://cxinxian.github.io/2021/05/19/java-ast/"/>
    <id>http://cxinxian.github.io/2021/05/19/java-ast/</id>
    <published>2021-05-19T08:31:45.000Z</published>
    <updated>2021-06-05T00:47:55.454Z</updated>
    
    <content type="html"><![CDATA[<p>在上一篇文章<a href="2021/01/28/java-processor">java自定义编译时注解器</a>中讲述到了有关自定义注解器的使用，接来在这里将会讲述的是如何通过语法树表示所想要的代码结构，并通过编译处理器生成相应的字节码。</p><span id="more"></span><h3 id="Java-编译处理流程"><a href="#Java-编译处理流程" class="headerlink" title="Java 编译处理流程"></a>Java 编译处理流程</h3><ol><li>源文件在指定的命令行下被读取，解析为语法树。对应外部可见的定义会被记录到编译器的符号表中（符合表如：LineNumberTable 记录行号、LocalVariableTable 记录变量定义、Exception table 记录异常定义 、StackMapTable ）</li><li>注解处理器编译处理注解。</li><li>语法分析器根据已解析创建的语法树分析并生成字节码，在语法树分析期间，当前所引用到的其他类也将会的的解析。</li></ol><h3 id="一、抽象语法树（Abstract-Syntax-Tree）"><a href="#一、抽象语法树（Abstract-Syntax-Tree）" class="headerlink" title="一、抽象语法树（Abstract Syntax Tree）"></a>一、抽象语法树（Abstract Syntax Tree）</h3><p>在计算机科学中，<strong>抽象语法树</strong>（<strong>A</strong>bstract <strong>S</strong>yntax <strong>T</strong>ree，AST），或简称<strong>语法树</strong>（Syntax tree），是源代码语法结构的一种抽象表示。它以树状的形式表现编程语言的语法结构，树上的每个节点都表示源代码中的一种结构。</p><p>抽象语法树由JCTree 内部类（如：JCCompilationUnit、JCImport、JCClassDecl、JCMethodDecl、JCVariableDecl 等等）作为语法节点构成。语法树的节点可以是 包名、修饰符、类、接口、异常、方法、变量、返回值等。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">String</span> <span class="variable">var</span> <span class="operator">=</span> <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.print(<span class="keyword">var</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的语法树如下图：</p><p><img src="/assets/blogImg/java-ast/java-ast-pic1.png" alt="图1"></p><p>JCTree 类中提供了 <code>accept()</code> 方法来范围语法树中的所有语法节点。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public abstract void accept(JCTree.Visitor var1);</span><br></pre></td></tr></table></figure><p><code>accept</code> 方法接收一个JCTree的内部类 <code>Visitor</code> 作为参数，Visitor 提供了一系列访问语法树各个语法节点的方法。在获取到响应的语法节点后，我们可以对语法节点进行增删改操作。</p><p><code>Visitor</code> 的子类有 TreeScanner(可以扫描语法树的所有节点) 和 TreeTranslator（扫描语法树所有节点并且可以将节点进行转换）</p><h5 id="JCCompilationUnit"><a href="#JCCompilationUnit" class="headerlink" title="JCCompilationUnit"></a>JCCompilationUnit</h5><p>​Everything in one source file is kept in a TopLevel structure. 在语法树中作为每一个原文件的顶级结构，包含有 JCPackageDecl、JCImport、JCClassDecl 等信息。</p><h5 id="JCClassDecl-类定义"><a href="#JCClassDecl-类定义" class="headerlink" title="JCClassDecl 类定义"></a>JCClassDecl 类定义</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">JCClassDecl</span> <span class="keyword">extends</span> <span class="title class_">JCTree</span>.JCStatement <span class="keyword">implements</span> <span class="title class_">ClassTree</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> JCTree.JCModifiers mods;<span class="comment">// 类访问修饰符，如 public、private、final</span></span><br><span class="line">    <span class="keyword">public</span> Name name;<span class="comment">// 类名称</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;JCTree.JCTypeParameter&gt; typarams;<span class="comment">// 泛型参数列表</span></span><br><span class="line">    <span class="keyword">public</span> JCTree.JCExpression extending;<span class="comment">// 继承的父类</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;JCTree.JCExpression&gt; implementing;<span class="comment">// 实现的接口列表</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;JCTree&gt; defs;<span class="comment">// 成员变量、方法</span></span><br><span class="line">    <span class="keyword">public</span> ClassSymbol sym;<span class="comment">// 包名+类名</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="JCMethodDecl-方法定义"><a href="#JCMethodDecl-方法定义" class="headerlink" title="JCMethodDecl 方法定义"></a>JCMethodDecl 方法定义</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">JCMethodDecl</span> <span class="keyword">extends</span> <span class="title class_">JCTree</span> <span class="keyword">implements</span> <span class="title class_">MethodTree</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> JCTree.JCModifiers mods;<span class="comment">// 方法访问修饰符 public、private、static、final</span></span><br><span class="line">    <span class="keyword">public</span> Name name;<span class="comment">// 方法名称</span></span><br><span class="line">    <span class="keyword">public</span> JCTree.JCExpression restype;<span class="comment">// 返回类型</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;JCTree.JCTypeParameter&gt; typarams;<span class="comment">// 泛型参数列表</span></span><br><span class="line">    <span class="keyword">public</span> JCTree.JCVariableDecl recvparam;<span class="comment">// </span></span><br><span class="line">    <span class="keyword">public</span> List&lt;JCTree.JCVariableDecl&gt; params;<span class="comment">// 方法接收的参数列表</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;JCTree.JCExpression&gt; thrown;<span class="comment">// 方法异常 列表</span></span><br><span class="line">    <span class="keyword">public</span> JCTree.JCBlock body;<span class="comment">// 方法他</span></span><br><span class="line">    <span class="keyword">public</span> JCTree.JCExpression defaultValue;<span class="comment">//注解类的方法需要的defaultValue</span></span><br><span class="line">    <span class="keyword">public</span> MethodSymbol sym;<span class="comment">// //方法名+ （参数类型），如：setName(java.lang.String)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="JCModifiers-访问修饰定义"><a href="#JCModifiers-访问修饰定义" class="headerlink" title="JCModifiers 访问修饰定义"></a>JCModifiers 访问修饰定义</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">JCModifiers</span> <span class="keyword">extends</span> <span class="title class_">JCTree</span> <span class="keyword">implements</span> <span class="title class_">ModifiersTree</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> flags; <span class="comment">// 访问修饰标记 public、private、static、final</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;JCTree.JCAnnotation&gt; annotations;<span class="comment">//注解列表</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Flags</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">PUBLIC</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">PRIVATE</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">PROTECTED</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">STATIC</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">FINAL</span> <span class="operator">=</span> <span class="number">16</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">SYNCHRONIZED</span> <span class="operator">=</span> <span class="number">32</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">VOLATILE</span> <span class="operator">=</span> <span class="number">64</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">TRANSIENT</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">NATIVE</span> <span class="operator">=</span> <span class="number">256</span>;</span><br><span class="line">    .....</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 例子 如要表示 </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span>;</span><br><span class="line">treeMaker.Modifiers(Flags.PUBLIC + Flags.STATIC + Flags.FINAL);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="JCVariableDecl-变量的定义"><a href="#JCVariableDecl-变量的定义" class="headerlink" title="JCVariableDecl 变量的定义"></a>JCVariableDecl 变量的定义</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">JCVariableDecl</span> <span class="keyword">extends</span> <span class="title class_">JCTree</span>.JCStatement <span class="keyword">implements</span> <span class="title class_">VariableTree</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> JCTree.JCModifiers mods;<span class="comment">// 方法访问修饰符</span></span><br><span class="line">    <span class="keyword">public</span> Name name;<span class="comment">// 变量名称</span></span><br><span class="line">    <span class="keyword">public</span> JCTree.JCExpression nameexpr;</span><br><span class="line">    <span class="keyword">public</span> JCTree.JCExpression vartype;<span class="comment">// 变量类型</span></span><br><span class="line">    <span class="keyword">public</span> JCTree.JCExpression init;<span class="comment">// 变量初始化值</span></span><br><span class="line">    <span class="keyword">public</span> VarSymbol sym;<span class="comment">// 变量名</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例子</span></span><br><span class="line"><span class="comment">// 定义变量 :</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">treeMaker.VarDef(</span><br><span class="line">    treeMaker.Modifiers(Flags.PUBLIC + Flags.STATIC + Flags.FINAL),</span><br><span class="line">    names.from(<span class="string">&quot;i&quot;</span>),</span><br><span class="line">    treeMaker.TypeIdent(TypeTag.INT),</span><br><span class="line">    treeMaker.Literal(<span class="number">1</span>)</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="JCIdent-标识符表达式，可以表示类、变量引用或者方法。"><a href="#JCIdent-标识符表达式，可以表示类、变量引用或者方法。" class="headerlink" title="JCIdent  标识符表达式，可以表示类、变量引用或者方法。"></a>JCIdent  标识符表达式，可以表示类、变量引用或者方法。</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">JCIdent</span> <span class="keyword">extends</span> <span class="title class_">JCTree</span>.JCExpression <span class="keyword">implements</span> <span class="title class_">IdentifierTree</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Name name;  <span class="comment">//标识符的名字</span></span><br><span class="line">    <span class="keyword">public</span> Symbol sym; <span class="comment">//代表类时为包名+类名，代表其他类型数据时为null</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 样例 获取变量 x</span></span><br><span class="line">treeMaker.Ident(names.fromString(<span class="string">&quot;x&quot;</span>))))</span><br></pre></td></tr></table></figure><h5 id="JCIf-if语句定义"><a href="#JCIf-if语句定义" class="headerlink" title="JCIf   if语句定义"></a>JCIf   if语句定义</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">JCIf</span> <span class="keyword">extends</span> <span class="title class_">JCTree</span>.JCStatement <span class="keyword">implements</span> <span class="title class_">IfTree</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> JCTree.JCExpression cond;  <span class="comment">// 条件判断语句 </span></span><br><span class="line">    <span class="keyword">public</span> JCTree.JCStatement thenpart; <span class="comment">// if </span></span><br><span class="line">    <span class="keyword">public</span> JCTree.JCStatement elsepart; <span class="comment">// else</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="JCAssign-赋值语句"><a href="#JCAssign-赋值语句" class="headerlink" title="JCAssign  赋值语句"></a>JCAssign  赋值语句</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">JCAssign</span> <span class="keyword">extends</span> <span class="title class_">JCTree</span>.JCExpression <span class="keyword">implements</span> <span class="title class_">AssignmentTree</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> JCTree.JCExpression lhs;  <span class="comment">// 赋值语句左边表达式</span></span><br><span class="line">    <span class="keyword">public</span> JCTree.JCExpression rhs;  <span class="comment">// 赋值语句右边表达式</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="JCAssignOp"><a href="#JCAssignOp" class="headerlink" title="JCAssignOp"></a>JCAssignOp</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">JCAssignOp</span> <span class="keyword">extends</span> <span class="title class_">JCTree</span>.JCExpression <span class="keyword">implements</span> <span class="title class_">CompoundAssignmentTree</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> JCTree.Tag opcode; <span class="comment">// 操作符</span></span><br><span class="line">    <span class="keyword">public</span> JCTree.JCExpression lhs;<span class="comment">// 赋值语句左边表达式</span></span><br><span class="line">    <span class="keyword">public</span> JCTree.JCExpression rhs;<span class="comment">// 赋值语句右边表达式</span></span><br><span class="line">    <span class="keyword">public</span> Symbol operator;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// --&gt; opcode可取值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">enum</span> <span class="title class_">Tag</span> &#123;</span><br><span class="line">      BITOR_ASG(BITOR),                <span class="comment">// |=</span></span><br><span class="line">      BITXOR_ASG(BITXOR),              <span class="comment">// ^=</span></span><br><span class="line">      BITAND_ASG(BITAND),              <span class="comment">// &amp;=</span></span><br><span class="line"></span><br><span class="line">      SL_ASG(SL),                      <span class="comment">// &lt;&lt;=</span></span><br><span class="line">      SR_ASG(SR),                      <span class="comment">// &gt;&gt;=</span></span><br><span class="line">      USR_ASG(USR),                    <span class="comment">// &gt;&gt;&gt;=</span></span><br><span class="line">      PLUS_ASG(PLUS),                  <span class="comment">// +=</span></span><br><span class="line">      MINUS_ASG(MINUS),                <span class="comment">// -=</span></span><br><span class="line">      MUL_ASG(MUL),                    <span class="comment">// *=</span></span><br><span class="line">      DIV_ASG(DIV),                    <span class="comment">// /=</span></span><br><span class="line">      MOD_ASG(MOD),                    <span class="comment">// %=</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="JCBinary-二元操作符"><a href="#JCBinary-二元操作符" class="headerlink" title="JCBinary  二元操作符"></a>JCBinary  二元操作符</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">JCBinary</span> <span class="keyword">extends</span> <span class="title class_">JCTree</span>.JCExpression <span class="keyword">implements</span> <span class="title class_">BinaryTree</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> JCTree.Tag opcode;<span class="comment">// 操作符</span></span><br><span class="line">    <span class="keyword">public</span> JCTree.JCExpression lhs;<span class="comment">// 赋值语句左边表达式</span></span><br><span class="line">    <span class="keyword">public</span> JCTree.JCExpression rhs;<span class="comment">// 赋值语句右边表达式</span></span><br><span class="line">    <span class="keyword">public</span> Symbol operator;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// --&gt; 二元运算符opcode可取值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">enum</span> <span class="title class_">Tag</span> &#123;</span><br><span class="line">        OR,                              <span class="comment">// ||</span></span><br><span class="line">        AND,                             <span class="comment">// &amp;&amp;</span></span><br><span class="line">        BITOR,                           <span class="comment">// |</span></span><br><span class="line">        BITXOR,                          <span class="comment">// ^</span></span><br><span class="line">        BITAND,                          <span class="comment">// &amp;</span></span><br><span class="line">        EQ,                              <span class="comment">// ==</span></span><br><span class="line">        NE,                              <span class="comment">// !=</span></span><br><span class="line">        LT,                              <span class="comment">// &lt;</span></span><br><span class="line">        GT,                              <span class="comment">// &gt;</span></span><br><span class="line">        LE,                              <span class="comment">// &lt;=</span></span><br><span class="line">        GE,                              <span class="comment">// &gt;=</span></span><br><span class="line">        SL,                              <span class="comment">// &lt;&lt;</span></span><br><span class="line">        SR,                              <span class="comment">// &gt;&gt;</span></span><br><span class="line">        USR,                             <span class="comment">// &gt;&gt;&gt;</span></span><br><span class="line">        PLUS,                            <span class="comment">// +</span></span><br><span class="line">        MINUS,                           <span class="comment">// -</span></span><br><span class="line">        MUL,                             <span class="comment">// *</span></span><br><span class="line">        DIV,                             <span class="comment">// /</span></span><br><span class="line">        MOD,                             <span class="comment">// %</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="JCReturn-返回语句"><a href="#JCReturn-返回语句" class="headerlink" title="JCReturn  返回语句"></a>JCReturn  返回语句</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">JCReturn</span> <span class="keyword">extends</span> <span class="title class_">JCTree</span>.JCStatement <span class="keyword">implements</span> <span class="title class_">ReturnTree</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> JCTree.JCExpression expr;   <span class="comment">//返回语句的结果字段</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="JCLiteral-字面量表达式"><a href="#JCLiteral-字面量表达式" class="headerlink" title="JCLiteral  字面量表达式"></a>JCLiteral  字面量表达式</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">JCLiteral</span> <span class="keyword">extends</span> <span class="title class_">JCTree</span>.JCExpression <span class="keyword">implements</span> <span class="title class_">LiteralTree</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> TypeTag typetag;<span class="comment">//常量的类型</span></span><br><span class="line">    <span class="keyword">public</span> Object value;<span class="comment">//常量值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// --&gt; typetag 常量类型取值 </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">TypeTag</span> &#123;</span><br><span class="line">    BYTE(<span class="number">1</span>, <span class="number">125</span>, <span class="literal">true</span>),<span class="comment">// byte 类型</span></span><br><span class="line">    CHAR(<span class="number">2</span>, <span class="number">122</span>, <span class="literal">true</span>),<span class="comment">// char 类型</span></span><br><span class="line">    SHORT(<span class="number">4</span>, <span class="number">124</span>, <span class="literal">true</span>),<span class="comment">// short 类型</span></span><br><span class="line">    LONG(<span class="number">16</span>, <span class="number">112</span>, <span class="literal">true</span>),<span class="comment">// long 类型</span></span><br><span class="line">    FLOAT(<span class="number">32</span>, <span class="number">96</span>, <span class="literal">true</span>),<span class="comment">// float 类型</span></span><br><span class="line">    INT(<span class="number">8</span>, <span class="number">120</span>, <span class="literal">true</span>),<span class="comment">// int 类型</span></span><br><span class="line">    DOUBLE(<span class="number">64</span>, <span class="number">64</span>, <span class="literal">true</span>),<span class="comment">// double 类型</span></span><br><span class="line">    BOOLEAN(<span class="number">0</span>, <span class="number">0</span>, <span class="literal">true</span>),<span class="comment">// boolean 类型</span></span><br><span class="line">    VOID,<span class="comment">// void</span></span><br><span class="line">    CLASS,<span class="comment">// class </span></span><br><span class="line">    ARRAY,<span class="comment">// array 数组</span></span><br><span class="line">    METHOD,<span class="comment">// method 方法</span></span><br><span class="line">    PACKAGE,<span class="comment">// package 包</span></span><br><span class="line">    TYPEVAR,</span><br><span class="line">    WILDCARD,</span><br><span class="line">    FORALL,</span><br><span class="line">    DEFERRED,</span><br><span class="line">    BOT,</span><br><span class="line">    NONE,</span><br><span class="line">    ERROR,</span><br><span class="line">    UNKNOWN,</span><br><span class="line">    UNDETVAR,</span><br><span class="line">    UNINITIALIZED_THIS,</span><br><span class="line">    UNINITIALIZED_OBJECT;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 样例</span></span><br><span class="line">treeMaker.Literal(TypeTag.BOT,<span class="literal">null</span>)  <span class="comment">//  表示  null</span></span><br></pre></td></tr></table></figure><h5 id="JCFieldAccess-其他类的变量、方法的访问表达式"><a href="#JCFieldAccess-其他类的变量、方法的访问表达式" class="headerlink" title="JCFieldAccess   其他类的变量、方法的访问表达式"></a>JCFieldAccess   其他类的变量、方法的访问表达式</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">JCFieldAccess</span> <span class="keyword">extends</span> <span class="title class_">JCTree</span>.JCExpression <span class="keyword">implements</span> <span class="title class_">MemberSelectTree</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> JCTree.JCExpression selected; <span class="comment">//类访问表达式</span></span><br><span class="line">    <span class="keyword">public</span> Name name;<span class="comment">// 变量名、方法名</span></span><br><span class="line">    <span class="keyword">public</span> Symbol sym;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="JCMethodInvocation-方法调用表达式"><a href="#JCMethodInvocation-方法调用表达式" class="headerlink" title="JCMethodInvocation   方法调用表达式"></a>JCMethodInvocation   方法调用表达式</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">JCMethodInvocation</span> <span class="keyword">extends</span> <span class="title class_">JCTree</span>.JCPolyExpression <span class="keyword">implements</span> <span class="title class_">MethodInvocationTree</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;JCTree.JCExpression&gt; typeargs;<span class="comment">// 调用方法参数类型列表</span></span><br><span class="line">    <span class="keyword">public</span> JCTree.JCExpression meth;<span class="comment">// 方法的调用语句</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;JCTree.JCExpression&gt; args;<span class="comment">// 参数列表</span></span><br><span class="line">    <span class="keyword">public</span> Type varargsElement;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="JCSkip"><a href="#JCSkip" class="headerlink" title="JCSkip"></a>JCSkip</h5><p>空操作，即一个无效的分号 “;”</p><h5 id="JCUnary-一元运算表达式"><a href="#JCUnary-一元运算表达式" class="headerlink" title="JCUnary  一元运算表达式"></a>JCUnary  一元运算表达式</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">JCUnary</span> <span class="keyword">extends</span> <span class="title class_">JCTree</span>.JCExpression <span class="keyword">implements</span> <span class="title class_">UnaryTree</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> JCTree.Tag opcode;<span class="comment">//操作运算符</span></span><br><span class="line">        <span class="keyword">public</span> JCTree.JCExpression arg;<span class="comment">//</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">enum</span> <span class="title class_">Tag</span> &#123;</span><br><span class="line">  POS,                             <span class="comment">// +</span></span><br><span class="line">  NEG,                             <span class="comment">// -</span></span><br><span class="line">  NOT,                             <span class="comment">// !</span></span><br><span class="line">  COMPL,                           <span class="comment">// ~</span></span><br><span class="line">  PREINC,                          <span class="comment">// ++ _；例子：++i</span></span><br><span class="line">  PREDEC,                          <span class="comment">// -- _； 例子：--i</span></span><br><span class="line">  POSTINC,                         <span class="comment">// _ ++; 例子：i++</span></span><br><span class="line">  POSTDEC,                         <span class="comment">// _ --; 例子：i--</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">--&gt;例子：i++;</span><br><span class="line">treeMaker.Unary(JCTree.Tag.POSTINC, treeMaker.Ident(names.fromString(<span class="string">&quot;i&quot;</span>)));</span><br></pre></td></tr></table></figure><h5 id="JCBlock-代码块-定义"><a href="#JCBlock-代码块-定义" class="headerlink" title="JCBlock 代码块 定义"></a>JCBlock 代码块 定义</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">JCBlock</span> <span class="keyword">extends</span> <span class="title class_">JCTree</span>.JCStatement <span class="keyword">implements</span> <span class="title class_">BlockTree</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">long</span> flags;</span><br><span class="line">        <span class="keyword">public</span> List&lt;JCTree.JCStatement&gt; stats;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="variable">endpos</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 例子</span></span><br><span class="line">List&lt;JCTree.JCStatement&gt; jcStatements = List.nil();</span><br><span class="line">treeMaker.Block(<span class="number">0</span>,jcStatements);</span><br></pre></td></tr></table></figure><h5 id="JCForLoop-for-循环代码块定义"><a href="#JCForLoop-for-循环代码块定义" class="headerlink" title="JCForLoop    for 循环代码块定义"></a>JCForLoop    for 循环代码块定义</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">JCForLoop</span> <span class="keyword">extends</span> <span class="title class_">JCTree</span>.JCStatement <span class="keyword">implements</span> <span class="title class_">ForLoopTree</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;JCTree.JCStatement&gt; init;</span><br><span class="line">    <span class="keyword">public</span> JCTree.JCExpression cond;</span><br><span class="line">    <span class="keyword">public</span> List&lt;JCTree.JCExpressionStatement&gt; step;</span><br><span class="line">    <span class="keyword">public</span> JCTree.JCStatement body;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="JCDoWhileLoop-do…while-循环代码块定义"><a href="#JCDoWhileLoop-do…while-循环代码块定义" class="headerlink" title="JCDoWhileLoop  do…while 循环代码块定义"></a>JCDoWhileLoop  do…while 循环代码块定义</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">JCDoWhileLoop</span> <span class="keyword">extends</span> <span class="title class_">JCTree</span>.JCStatement <span class="keyword">implements</span> <span class="title class_">DoWhileLoopTree</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> JCTree.JCStatement body;</span><br><span class="line">    <span class="keyword">public</span> JCTree.JCExpression cond;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="JCWhileLoop-while-循环代码块定义"><a href="#JCWhileLoop-while-循环代码块定义" class="headerlink" title="JCWhileLoop    while 循环代码块定义"></a>JCWhileLoop    while 循环代码块定义</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">JCWhileLoop</span> <span class="keyword">extends</span> <span class="title class_">JCTree</span>.JCStatement <span class="keyword">implements</span> <span class="title class_">WhileLoopTree</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> JCTree.JCExpression cond;</span><br><span class="line">    <span class="keyword">public</span> JCTree.JCStatement body;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="JCEnhancedForLoop-增强for-循环定义"><a href="#JCEnhancedForLoop-增强for-循环定义" class="headerlink" title="JCEnhancedForLoop  增强for 循环定义"></a>JCEnhancedForLoop  增强for 循环定义</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">JCWhileLoop</span> <span class="keyword">extends</span> <span class="title class_">JCTree</span>.JCStatement <span class="keyword">implements</span> <span class="title class_">WhileLoopTree</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> JCTree.JCExpression cond;</span><br><span class="line">    <span class="keyword">public</span> JCTree.JCStatement body;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="JCSynchronized-同步锁定义"><a href="#JCSynchronized-同步锁定义" class="headerlink" title="JCSynchronized 同步锁定义"></a>JCSynchronized 同步锁定义</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">JCSynchronized</span> <span class="keyword">extends</span> <span class="title class_">JCTree</span>.JCStatement <span class="keyword">implements</span> <span class="title class_">SynchronizedTree</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> JCTree.JCExpression lock;</span><br><span class="line">    <span class="keyword">public</span> JCTree.JCBlock body;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 样例 synchronized()&#123;&#125;</span></span><br></pre></td></tr></table></figure><p>样例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构建同步代码块</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">gen</span><span class="params">()</span>&#123;</span><br><span class="line">        ....</span><br><span class="line">        JCTree.<span class="type">JCStatement</span> <span class="variable">jcStatement</span> <span class="operator">=</span> treeMaker.Exec(</span><br><span class="line">                treeMaker.Apply(List.nil(),treeMaker.Select(</span><br><span class="line">                        treeMaker.Select(</span><br><span class="line">                                treeMaker.Ident(</span><br><span class="line">                                        names.fromString(<span class="string">&quot;System&quot;</span>)</span><br><span class="line">                                ),</span><br><span class="line">                                names.fromString(<span class="string">&quot;out&quot;</span>)</span><br><span class="line">                        ),</span><br><span class="line">                        names.fromString(<span class="string">&quot;println&quot;</span>)</span><br><span class="line">                ),List.of(treeMaker.Literal(<span class="string">&quot;Hello, world!!!&quot;</span>)))</span><br><span class="line">        );</span><br><span class="line">List&lt;JCTree.JCStatement&gt; statementList = List.nil();</span><br><span class="line">        <span class="comment">// &#123;System.out.println(&quot;Hello, world!!!&quot;);&#125;</span></span><br><span class="line">JCTree.<span class="type">JCBlock</span> <span class="variable">jcBlock</span> <span class="operator">=</span> treeMaker.Block(<span class="number">0</span>,statementList);</span><br><span class="line">   </span><br><span class="line">        <span class="comment">// syschroninzed(demoA)</span></span><br><span class="line">   JCTree.<span class="type">JCExpression</span> <span class="variable">SynjcExpression</span> <span class="operator">=</span> treeMaker.Ident(names.fromString(<span class="string">&quot;demoA&quot;</span>));</span><br><span class="line">   JCTree.<span class="type">JCSynchronized</span> <span class="variable">jcSynchronized</span> <span class="operator">=</span> treeMaker.Synchronized(SynjcExpression,jcBlock);</span><br><span class="line">        .....</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 最终结果为：</span></span><br><span class="line"><span class="keyword">synchronized</span>(demoA) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Hello, world!!!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>参考资料：</p><p><a href="http://openjdk.java.net/groups/compiler/doc/compilation-overview/index.html">http://openjdk.java.net/groups/compiler/doc/compilation-overview/index.html</a></p><p><a href="https://www.cnblogs.com/wade-luffy/p/6050331.html">https://www.cnblogs.com/wade-luffy/p/6050331.html</a></p><p><a href="https://www.jianshu.com/p/ff8ec920f5b9">https://www.jianshu.com/p/ff8ec920f5b9</a></p><p><a href="https://www.jianshu.com/p/5df7f77611dc">https://www.jianshu.com/p/5df7f77611dc</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在上一篇文章&lt;a href=&quot;2021/01/28/java-processor&quot;&gt;java自定义编译时注解器&lt;/a&gt;中讲述到了有关自定义注解器的使用，接来在这里将会讲述的是如何通过语法树表示所想要的代码结构，并通过编译处理器生成相应的字节码。&lt;/p&gt;</summary>
    
    
    
    
    <category term="java" scheme="http://cxinxian.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>java自定义编译时注解器</title>
    <link href="http://cxinxian.github.io/2021/01/28/java-processor/"/>
    <id>http://cxinxian.github.io/2021/01/28/java-processor/</id>
    <published>2021-01-28T02:04:42.000Z</published>
    <updated>2021-06-05T00:48:41.662Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一、注解器"><a href="#一、注解器" class="headerlink" title="一、注解器"></a>一、注解器</h4><p>java 注解编译处理器，主要作用是针对特定的注解进行相应的处理。根据个人观察目前主要多用于代码生成、代码审查。在安卓开发中，常用的Butterknife、Dagger2、Room等以及一些组件化的框架都都会看到编译注解处理器的身影。而在java后端的开发中 Lombok 也是有使用到边缘处理器的。</p><span id="more"></span><p>关于注解的定义及分类的大概信息如下图，图片来源于 <a href="https://blog.csdn.net/asd54090/article/details/80920667">https://blog.csdn.net/asd54090/article/details/80920667</a>  ， 感谢前辈大佬的整理。</p><p><img src="/assets/blogImg/java-processor/1.jpg" alt="图1"></p><h4 id="二、认识AbstractProcessor"><a href="#二、认识AbstractProcessor" class="headerlink" title="二、认识AbstractProcessor"></a>二、认识AbstractProcessor</h4><p>注解处理器（Annotation Processor） 是javac 的一个工具，主要是在编译时扫描和处理由注解。那么我们要处理特定的注解，自然是上不了注解处理器，想要自定义注解处理器处理特定的逻辑和代码，那么就应该继承 <code>AbstractProcessor</code> 这个抽象类，并实现 <code>process</code>方法。</p><p><code>AbstractProcessor </code> 类的主要几个方法如下：</p><ul><li><p><code>init(ProcessingEnvironment env)</code> ：由注解工具调用，并传入 <code>ProcessingEnvironment </code> 参数，<code>ProcessingEnvironment </code> 提供很多工具类<code>Messager</code>、<code>Types</code>、<code>Elements</code> 、<code>Filer</code> 等等。</p></li><li><p><code>process(Set&lt;? extends TypeElement&gt; annotations, RoundEnvironment roundEnv)</code> ：每个处理器的核心处理业务都在这里得到执行，可以实现代码扫描、评估、注释代码处理，生成java文件。通过参数<code>RoundEnvironment</code>的 <code>getElementsAnnotatedWith</code> 可以获取到特定注解的元素。</p></li><li><p><code>getSupportedSourceVersion()</code>：主要用来指定处理器支持处理的Java版本，通常使用<code>SourceVersion.latestSupported()</code> 作为返回值。当然如果自定义注解类使用了<code>@SupportedSourceVersion</code> 注解，可以不用重写此方法。</p><p>注意：如果使用<code>@SupportedSourceVersion</code> 注解，需要考虑，这个注解是 java 6 才引入的</p></li><li><p><code>getSupportedAnnotationTypes()</code> : 主要是用来设置当前注解处理器支持处理的注解，如果不指定需要处理的注解，则 <code>process</code> 方法将不会得到执行。该方法返回的是 <code>Set&lt;String&gt;</code> 集合，包含支持注解的合法全称。</p><p>注意：该方法也可以使用<code>@SupportedAnnotationTypes</code> 注解来代替。</p></li></ul><h4 id="三、自定义-Annotation-Processor"><a href="#三、自定义-Annotation-Processor" class="headerlink" title="三、自定义 Annotation Processor"></a>三、自定义 Annotation Processor</h4><p>实现自定义注解大概分为以下这几个步骤:</p><p>step1、定义注解；</p><p>step2、继承 <strong>AbstractProcessor</strong> 类并实现抽象方法 <code>process</code> 和重新上面介绍到的另外几个方法;</p><p>step3、编写关键的业务代码逻辑，主要在逻辑应写在 <code>process</code> 方法中；比如解析语法树，编辑修改、增加语法树等等</p><p>（关于语法树，本次不做记录和解释，后面再新的篇幅另做介绍。）</p><p>新建工程，maven 依赖如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;com.google.auto.service&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;auto-service&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;<span class="number">1.0</span>-rc2&lt;/version&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;com.sun&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;tools&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;<span class="number">1.8</span>&lt;/version&gt;</span><br><span class="line">     &lt;scope&gt;system&lt;/scope&gt;</span><br><span class="line">     &lt;systemPath&gt;$&#123;java.home&#125;/../lib/tools.jar&lt;/systemPath&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br><span class="line"> &lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><ul><li>AutoService 会自动在META-INF文件夹下生成Processor配置信息文件，该文件里就是实现该服务接口的具体实现类。而当外部程序装配这个模块的时候，就能通过该jar包META-INF&#x2F;services&#x2F;里的配置文件找到具体的实现类名，并装载实例化，完成模块的注入。基于这样一个约定就能很好的找到服务接口的实现类，而不需要再代码里制定，方便快捷。</li></ul><p>如果不依赖 <code>auto-service</code> 时，则需要在 <code>META-INF\services</code>  文件夹下手动创建 <code>javax.annotation.processing.Processor</code> 文件。并且保存自定义注解器的包路径，如：<code>com.godc.XAnnotionProcessor</code></p><ul><li>tools 依赖包是jdk 自带的工具包，语法树相关的都会用到该依赖。比如：JCTree、TreeMaker</li></ul><p>首先定义一个注解，比如一个方法注解，在注解的方法中添加日志打印</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.godc.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.SOURCE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Plog &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义处理器类如下</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.godc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.godc.annotation.Inject;</span><br><span class="line"><span class="keyword">import</span> com.godc.annotation.InjectParams;</span><br><span class="line"><span class="keyword">import</span> com.godc.annotation.Plog;</span><br><span class="line"><span class="keyword">import</span> com.godc.annotation.Service;</span><br><span class="line"><span class="keyword">import</span> com.google.auto.service.AutoService;</span><br><span class="line"><span class="keyword">import</span> com.sun.source.util.Trees;</span><br><span class="line"><span class="keyword">import</span> com.sun.tools.javac.model.JavacElements;</span><br><span class="line"><span class="keyword">import</span> com.sun.tools.javac.processing.JavacProcessingEnvironment;</span><br><span class="line"><span class="keyword">import</span> com.sun.tools.javac.tree.JCTree;</span><br><span class="line"><span class="keyword">import</span> com.sun.tools.javac.tree.TreeMaker;</span><br><span class="line"><span class="keyword">import</span> com.sun.tools.javac.util.Context;</span><br><span class="line"><span class="keyword">import</span> com.sun.tools.javac.util.Names;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.processing.*;</span><br><span class="line"><span class="keyword">import</span> javax.lang.model.SourceVersion;</span><br><span class="line"><span class="keyword">import</span> javax.lang.model.element.Element;</span><br><span class="line"><span class="keyword">import</span> javax.lang.model.element.ElementKind;</span><br><span class="line"><span class="keyword">import</span> javax.lang.model.element.TypeElement;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Annotation;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> MyAnnotionProcessor</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> chenxx</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/2/18 17:28</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@AutoService(Processor.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAnnotionProcessor</span> <span class="keyword">extends</span> <span class="title class_">AbstractProcessor</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    Trees trees;</span><br><span class="line">    Names names;</span><br><span class="line">    TreeMaker treeMaker;</span><br><span class="line">    JavacElements javacElements;</span><br><span class="line">    Messager messager;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置当前注解处理器需要处理的注解</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;Class&lt;? <span class="keyword">extends</span> <span class="title class_">Annotation</span>&gt;&gt; ANNOTATIONS = Arrays.asList(</span><br><span class="line">            Inject.class</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * init 方法由注解工具的构造方法调用，并传入 ProcessingEnvironment  参数</span></span><br><span class="line"><span class="comment">     * 该参数提供了很多工具类，比如 Elements， Filer， Messager， Types，TreMaker，Names</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> processingEnv</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ProcessingEnvironment processingEnv)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.init(processingEnv);</span><br><span class="line">        <span class="type">Context</span> <span class="variable">context</span> <span class="operator">=</span> ((JavacProcessingEnvironment)processingEnv).getContext();</span><br><span class="line">        messager = processingEnv.getMessager();</span><br><span class="line">        trees = Trees.instance(processingEnv);</span><br><span class="line">        names = Names.instance(context);</span><br><span class="line">        javacElements = ((JavacProcessingEnvironment) processingEnv).getElementUtils();</span><br><span class="line">        treeMaker = TreeMaker.instance(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这个方法虽我们也是需要实现。</span></span><br><span class="line"><span class="comment">     * 因为该方法的作用是明确指定我们要处理哪些注解的，</span></span><br><span class="line"><span class="comment">     * 所以你要在这里指明，你需要处理的注解的全称。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 返回值是一个字符串的集合，包含着本处理器想要处理的注解类型的合法全称。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;String&gt; <span class="title function_">getSupportedAnnotationTypes</span><span class="params">()</span> &#123;</span><br><span class="line">        Set&lt;String&gt; supportAnnotationTypes = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Class&lt;? <span class="keyword">extends</span> <span class="title class_">Annotation</span>&gt; annotation : ANNOTATIONS)&#123;</span><br><span class="line">            supportAnnotationTypes.add(annotation.getCanonicalName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> supportAnnotationTypes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主要用来指定处理器支持处理的Java版本，通常使用 SourceVersion.latestSupported()`</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> SourceVersion <span class="title function_">getSupportedSourceVersion</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SourceVersion.latestSupported();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 每个处理器的核心处理业务都在这里得到执行，可以实现代码扫描、评估、注释代码处理，生成java文件。</span></span><br><span class="line"><span class="comment">     * 通过参数`RoundEnvironment`的 `getElementsAnnotatedWith` 可以获取到特定注解的元素。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> annotations</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> roundEnv</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">process</span><span class="params">(Set&lt;? extends TypeElement&gt; annotations, RoundEnvironment roundEnv)</span> &#123;</span><br><span class="line">        Set&lt;? <span class="keyword">extends</span> <span class="title class_">Element</span>&gt; elementSet = roundEnv.getElementsAnnotatedWith(Inject.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;====================&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Element element : elementSet)&#123;</span><br><span class="line">            JCTree.<span class="type">JCMethodDecl</span> <span class="variable">jcMethodDecl</span> <span class="operator">=</span> (JCTree.JCMethodDecl) javacElements.getTree(element);</span><br><span class="line"></span><br><span class="line">            treeMaker.pos = jcMethodDecl.pos;</span><br><span class="line">            jcMethodDecl.body = treeMaker.Block(<span class="number">1</span>, com.sun.tools.javac.util.List.of(</span><br><span class="line">                    treeMaker.Exec(</span><br><span class="line">                            treeMaker.Apply(com.sun.tools.javac.util.List.nil(),treeMaker.Select(</span><br><span class="line">                                    treeMaker.Select(</span><br><span class="line">                                            treeMaker.Ident(</span><br><span class="line">                                                    javacElements.getName(<span class="string">&quot;System&quot;</span>)</span><br><span class="line">                                            ),</span><br><span class="line">                                            javacElements.getName(<span class="string">&quot;out&quot;</span>)</span><br><span class="line">                                    ),</span><br><span class="line">                                    javacElements.getName(<span class="string">&quot;println&quot;</span>)</span><br><span class="line">                            ),com.sun.tools.javac.util.List.of(treeMaker.Literal(<span class="string">&quot;Hello, world!!!&quot;</span>)))</span><br><span class="line">                    ),</span><br><span class="line">                    jcMethodDecl.body</span><br><span class="line">            ));</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;====================&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>编写测试方法，并使用注解，编译项目就会得到如下效果</p><p><img src="/assets/blogImg/java-processor/2.jpg" alt="图2"></p><h4 id="四、调试注解器"><a href="#四、调试注解器" class="headerlink" title="四、调试注解器"></a>四、调试注解器</h4><p>在 IDEA中调试编译注解器还是挺方便的，IDEA作为客户端，JVM作为服务端。主要三个步骤：</p><ol><li>在注解器中打断点</li><li>在IDEA （Edit Configurations）中配置远程调试 （如下图3）</li><li>在 terminal 控制台输入 <code>mvnDebug clean package</code>，打开maven 远程调试服务监听 8000 端口了</li><li>点击debug 按钮 启动远程调试</li></ol><p><img src="/assets/blogImg/java-processor/pic3.jpg" alt="图3"></p><p>在此次的测试中，项目结构如下图：</p><p><code>mprocessor</code> 为注解器模块，存放注解、注解器的实现，代码生成</p><p><code>testprocessor</code> 为测试模块，依赖 注解器模块 做测试</p><p><img src="/assets/blogImg/java-processor/pic4.png" alt="图4"></p><h4 id="资源来源："><a href="#资源来源：" class="headerlink" title="资源来源："></a>资源来源：</h4><p><a href="https://blog.csdn.net/asd54090/article/details/80920667">https://blog.csdn.net/asd54090/article/details/80920667</a></p><p><a href="https://docs.oracle.com/javase/7/docs/api/javax/annotation/processing/AbstractProcessor.html">https://docs.oracle.com/javase/7/docs/api/javax/annotation/processing/AbstractProcessor.html</a></p><p><a href="https://blog.csdn.net/dap769815768/article/details/90448451">https://blog.csdn.net/dap769815768/article/details/90448451</a></p><p><a href="https://www.jianshu.com/p/68fcbc154c2f">https://www.jianshu.com/p/68fcbc154c2f</a></p><p><a href="https://www.jianshu.com/p/d0dd91c7c560">https://www.jianshu.com/p/d0dd91c7c560</a></p>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;一、注解器&quot;&gt;&lt;a href=&quot;#一、注解器&quot; class=&quot;headerlink&quot; title=&quot;一、注解器&quot;&gt;&lt;/a&gt;一、注解器&lt;/h4&gt;&lt;p&gt;java 注解编译处理器，主要作用是针对特定的注解进行相应的处理。根据个人观察目前主要多用于代码生成、代码审查。在安卓开发中，常用的Butterknife、Dagger2、Room等以及一些组件化的框架都都会看到编译注解处理器的身影。而在java后端的开发中 Lombok 也是有使用到边缘处理器的。&lt;/p&gt;</summary>
    
    
    
    
    <category term="java" scheme="http://cxinxian.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>关于yuv的学习理解</title>
    <link href="http://cxinxian.github.io/2021/01/25/about-yuv/"/>
    <id>http://cxinxian.github.io/2021/01/25/about-yuv/</id>
    <published>2021-01-25T14:08:45.000Z</published>
    <updated>2022-02-28T02:13:18.962Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>&emsp;在Android视频或者拍摄图片开发中，因为不了解yuv，所以在写视频demo时，手机预览的界面可能存在旋转 90&#x2F;180&#x2F;270 度的问题。大部分后置摄像头是旋转了90度，</p><p>&emsp;前置摄像头旋转270了度。如果要看到正常角度的预览界面，我们则需要对摄像头进行旋转一定的角度，而且旋转的角度只能是 0&#x2F;90&#x2F;180&#x2F;270。</p><p>&emsp;关于摄像头的旋转和开发打算放在下一篇文章记录，而这一次有更加重要的内容要记录。即使我们设置了正确的预览界面，当按下快门或者拍摄视频的那一刻，</p><p>&emsp;摄像头记录下的数据(默认为NV21数据格式，是YUV的一种数据格式)，可能并不是我们真正想要的。记录的照片或者视频的角度可能会存在问题，可能是旋转了 90&#x2F;180&#x2F;270 度。而我们要想获取到正确的角度，那么需要用 YUV 对数据进行转换或者旋转，才能得到我们希望的角度。</p><span id="more"></span><h4 id="一、YUV与RGB"><a href="#一、YUV与RGB" class="headerlink" title="一、YUV与RGB"></a>一、YUV与RGB</h4><ul><li><p><strong>YUV</strong>  </p><p>&emsp;是视频应用程序中使用的一类像素格式。</p><p>&emsp;亮度信号通常被称作Y，色度信号通常是由两个相互独立的的信号组成，不同的颜色系统有不同的格式，两种不同的色度信号经常被称作U和V 或者 Cb和 Cr 或者 Pb和Pr。这是由于不同颜色系统的编码格式不一样所产生的，实际上是相同的概念。色度信号主要作用是描述影像色彩及饱和度，用于指定像素的颜色。</p><p>&emsp;主要用于电视系统以及模拟视频领域，它将亮度（luma）信息（Y）与色彩(chroma)信息（UV）分离，没有UV信息一样可以显示完整的图像，只不过是黑白的，这样的设计很好地解决了彩色电视机与黑白电视的兼容问题。并且，YUV不像RGB那样要求三个独立的视频信号同时传输，所以用YUV方式传送占用极少的频宽。</p></li><li><p><strong>RGB</strong></p><p>&emsp;是用于表示图像和视频的颜色模型。RGB代表<em>红色</em>，<em>绿色</em>和<em>蓝色</em>分量。</p></li></ul><p>YUV 的格式有两种，分别是 <code>planar</code> 和 <code>packed</code></p><ul><li><strong>planar</strong> （平面格式）先连续存储所以像素点的Y，紧接着存储所有像素点的U，最后是存储所有像素点的V。<ul><li>属于planer 的有 NV12、NV21、YV12、I420 等等，列举的这几个主要是YUV4:2:0采样，当然也包含其他采样方式。</li></ul></li><li><strong>packed</strong>  （打包格式）是每个像素点的Y、U、V是连续交叉存储的。<ul><li>属于packed的有 YUYV、UYVY、VYUY等，这几个主要是YUV4:2:2采样</li></ul></li></ul><p>在Android 平台下使用相机默认格式是NV21，属于YUV420sp</p><h4 id="二、YUV的-4-4-4-、4-2-2、4-2-0采样模式"><a href="#二、YUV的-4-4-4-、4-2-2、4-2-0采样模式" class="headerlink" title="二、YUV的 4:4:4 、4:2:2、4:2:0采样模式"></a>二、YUV的 4:4:4 、4:2:2、4:2:0采样模式</h4><p>据研究表明人眼对亮度的分辨相对于色彩色度的分辨更加敏锐，容易察觉。那么在存储图像信息时，采用不同的采样方式可以有效的减少媒体信息的内存空间和降低带宽资源的占用。</p><p><img src="/assets/blogImg/about-yuv/yuv-format.jpg" alt="图1"></p><p>通常地 <code>YUV a:b:c</code> 的意思是表示每4个像素采样点Y采样了a次，U采样了b次，V采样了c次。</p><p>如上图所示，每一个小格表示一个像素，那么在这4中不同的采样方式中像素点和对应的亮度、色度采集信息大概可以总结为如下：</p><ul><li><p><code>YUV4:4:4</code>采样方式生成的图像中，每4个采样的像素点都会对应4点亮度Y、4点U(或者Cb)、4点V(或者Cr)，即亮度分辨率和色度分辨率相等；一帧数据量为：<code>width * height * 3byte</code></p></li><li><p><code>YUV4:2:2</code>采样方式，即每4个采样像素点对应有4点Y采样，2点U、2点V。即在色度采样上，个一个采样点才会有色度信息，会丢弃一半色度信息。亮度和色度在水平方向比值 2:1，在垂直方向1:1。一帧的数据量为： <code>widht * heitht * 2byte</code></p></li><li><p><code>YUV4:2:0</code>采样，并不是只有Y、U或者V 采样，而是在行扫描线上，只有一种色度采样，其在存储中亮度和色度的采样比为2:1。也就是说，如果第一行YUV采样为4:2:0, 那么下一行是 4:0:2, 如此类推。从亮度、色度采样分布情况来看，每4个采样像素点在纵向和横向扫描线上都丢掉一半的色度采样信息。一帧的数据量为：<code>width * height * 1.5byte</code></p><p>其中<code>YUV4:2:0</code>分为两种：<code>YUV420P和YUV420SP</code></p><ul><li><code>YUV420P</code>又叫<code>plane平面模式</code>，Y、U、V 分别存储在不同的平面，也就有三个平面。它是标准格式<code>YUV4:2:0</code> ，又分为：<code>YV12</code> 和 <code>YU12</code></li><li><code>YUV420sp</code> 是一种<code>tow-plane模式</code>，即 Y与 UV分别存储在两个不同的平面，先是Y一个平面，然后UV（CbCr）在同一个平面里交替存储。子格式分为：<code>NV12</code>  和 <code>NV21</code></li></ul><p>最后总结如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">YUV 4:4:4采样，每一个Y对应一组UV分量,一个YUV占8+8+8 = 24bits 3个字节。</span><br><span class="line">YUV 4:2:2采样，每两个Y共用一组UV分量,一个YUV占8+4+4 = 16bits 2个字节。</span><br><span class="line">YUV 4:2:0采样，每四个Y共用一组UV分量,一个YUV占8+2+2 = 12bits 1.5个字节。</span><br></pre></td></tr></table></figure></li></ul><h4 id="三、YUV的存储格式"><a href="#三、YUV的存储格式" class="headerlink" title="三、YUV的存储格式"></a>三、YUV的存储格式</h4><p>基于不同采样方式的码流存储方式如下：</p><ul><li><strong>NV12、NV21格式：</strong></li></ul><p><img src="/assets/blogImg/about-yuv/nv12-nv21.jpg" alt="nv12-nv21"></p><p>&emsp;&emsp;NV12和NV21同属于YUV4:2:0 采样，是一种tow-plane模式，Y和UV分为两个Plane,UV交错存储。如图所示，其采样基本上遵循YUV4:2:0方式，即对于像素点Y<sub>00</sub>Y<sub>01</sub>Y<sub>10</sub>Y<sub>11</sub>，其对应色度值 UV(Cb,Cr) 为U<sub>00</sub>V<sub>00</sub>，二者的区别在于 NV12 是 UV(Cb，Cr) 交替存储，NV21是VU（Cb,Cr）交错存储。IOS应用的是NV12, 而Android应用的是NV21。</p><ul><li><p><strong>YV12、YU12格式：</strong></p><p><img src="/assets/blogImg/about-yuv/yv12-yu12.jpg" alt="yv12-yu12"></p><p>&emsp;&emsp;YV12、YU12码流格式属于YUV4:2:0，是plane模式，其中Y、U、V分量分别打包，依次存储。同样也是每4个像素点共享一对UV，即如图所示：Y<sub>00</sub>Y<sub>01</sub>Y<sub>10</sub>Y<sub>11</sub>，其对应色度值 UV(Cb,Cr) 为U<sub>00</sub>V<sub>00</sub></p></li><li><p><strong>I420格式：</strong></p><p><img src="/assets/blogImg/about-yuv/i420.jpg" alt="i420"></p><p>&emsp;&emsp;I420码流格式也是属于YUV4:2:0， Y、U、V采样数据分量分别打包，依次存储在不同的平面，对于Y<sub>00</sub>Y<sub>01</sub>Y<sub>10</sub>Y<sub>11</sub> 元素，共享的色度值元素为U<sub>00</sub>V<sub>00</sub></p></li><li><p><strong>YUYV格式：</strong></p><p><img src="/assets/blogImg/about-yuv/yuyv.jpg" alt="yv12-yu12"></p><p>&emsp;&emsp;YUYV是YUV4:2:2采样存储格式中的一种，是packed 打包格式，其中Y、U、V交替存储；相邻的两个Y 共享相邻的两个U、V色度采样，也即Y<sub>00</sub>Y<sub>01</sub> 共享 U<sub>00</sub>V<sub>00</sub></p></li><li><p><strong>UYVY、VYUY格式：</strong></p><p><img src="/assets/blogImg/about-yuv/uyvy-vyuy.jpg" alt="yv12-yu12"></p><p>&emsp;&emsp;图示为UYVY格式，同样的，也是YUV4:2:2采样存储格式中的一种，与YUYV不同的是UV分别排列在Y的前方。</p></li></ul><h4 id="四、YUV和RGB转换"><a href="#四、YUV和RGB转换" class="headerlink" title="四、YUV和RGB转换"></a>四、YUV和RGB转换</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">YUV and RGB</span><br><span class="line">YUV-&gt;RGB</span><br><span class="line">Y&#x27;= 0.299*R&#x27; + 0.587*G&#x27; + 0.114*B&#x27;</span><br><span class="line">U&#x27;= -0.147*R&#x27; - 0.289*G&#x27; + 0.436*B&#x27; = 0.492*(B&#x27;- Y&#x27;)</span><br><span class="line">V&#x27;= 0.615*R&#x27; - 0.515*G&#x27; - 0.100*B&#x27; = 0.877*(R&#x27;- Y&#x27;)</span><br><span class="line">RGB-&gt;YUV</span><br><span class="line">R&#x27; = Y&#x27; + 1.140*V&#x27;</span><br><span class="line">G&#x27; = Y&#x27; - 0.394*U&#x27; - 0.581*V&#x27;</span><br><span class="line">B&#x27; = Y&#x27; + 2.032*U&#x27;</span><br><span class="line">##################################################</span><br><span class="line">YCbCr and RGB</span><br><span class="line">YCbCr-&gt;RGB</span><br><span class="line">Y’ = 0.257*R&#x27; + 0.504*G&#x27; + 0.098*B&#x27; + 16</span><br><span class="line">Cb&#x27; = -0.148*R&#x27; - 0.291*G&#x27; + 0.439*B&#x27; + 128</span><br><span class="line">Cr&#x27; = 0.439*R&#x27; - 0.368*G&#x27; - 0.071*B&#x27; + 128</span><br><span class="line">RGB-&gt;YCbCr</span><br><span class="line">R&#x27; = 1.164*(Y’-16) + 1.596*(Cr&#x27;-128)</span><br><span class="line">G&#x27; = 1.164*(Y’-16) - 0.813*(Cr&#x27;-128) - 0.392*(Cb&#x27;-128)</span><br><span class="line">B&#x27; = 1.164*(Y’-16) + 2.017*(Cb&#x27;-128)</span><br></pre></td></tr></table></figure><h4 id="五、YUV旋转"><a href="#五、YUV旋转" class="headerlink" title="五、YUV旋转"></a>五、YUV旋转</h4><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://wiki.videolan.org/YUV/">https://wiki.videolan.org/YUV/</a></p><p><a href="https://wiki.videolan.org/RGB/">https://wiki.videolan.org/RGB/</a></p><p><a href="https://www.fourcc.org/yuv.php">https://www.fourcc.org/yuv.php</a></p><p><a href="https://www.cnblogs.com/sddai/p/10302979.html">https://www.cnblogs.com/sddai/p/10302979.html</a></p><p><a href="https://blog.csdn.net/iva_brother/article/details/84036877">https://blog.csdn.net/iva_brother/article/details/84036877</a></p><p><a href="https://zhuanlan.zhihu.com/p/85620611">https://zhuanlan.zhihu.com/p/85620611</a></p>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;&amp;emsp;在Android视频或者拍摄图片开发中，因为不了解yuv，所以在写视频demo时，手机预览的界面可能存在旋转 90&amp;#x2F;180&amp;#x2F;270 度的问题。大部分后置摄像头是旋转了90度，&lt;/p&gt;
&lt;p&gt;&amp;emsp;前置摄像头旋转270了度。如果要看到正常角度的预览界面，我们则需要对摄像头进行旋转一定的角度，而且旋转的角度只能是 0&amp;#x2F;90&amp;#x2F;180&amp;#x2F;270。&lt;/p&gt;
&lt;p&gt;&amp;emsp;关于摄像头的旋转和开发打算放在下一篇文章记录，而这一次有更加重要的内容要记录。即使我们设置了正确的预览界面，当按下快门或者拍摄视频的那一刻，&lt;/p&gt;
&lt;p&gt;&amp;emsp;摄像头记录下的数据(默认为NV21数据格式，是YUV的一种数据格式)，可能并不是我们真正想要的。记录的照片或者视频的角度可能会存在问题，可能是旋转了 90&amp;#x2F;180&amp;#x2F;270 度。而我们要想获取到正确的角度，那么需要用 YUV 对数据进行转换或者旋转，才能得到我们希望的角度。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Android" scheme="http://cxinxian.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Java CAS</title>
    <link href="http://cxinxian.github.io/2020/05/28/Java-CAS/"/>
    <id>http://cxinxian.github.io/2020/05/28/Java-CAS/</id>
    <published>2020-05-28T14:35:48.000Z</published>
    <updated>2021-06-05T00:48:19.626Z</updated>
    
    <content type="html"><![CDATA[<p>  本文主要是对于Java CAS 的学习整理加深记忆。<br>  有时候，很多知识都停留在印象中的大概了解，或者认识了名称，知道xxx名字概念的存在，<br>  或者曾经在xxx博客中看到过。对于学习这件事，如果只停留在看、思考的过程。即使有所有收获，没有真正的去实践，<br>  相信过不了多久也会遗之脑后。好记性不如烂笔头，至少也应该以文字记录自己的思考、实践过程作为输出，这样学习过程更为完美。</p><span id="more"></span><h3 id="一、什么是CAS？"><a href="#一、什么是CAS？" class="headerlink" title="一、什么是CAS？"></a>一、什么是CAS？</h3><p>CAS 全称是 Compare And Swap 意思是比较 并且 交换。CAS 其实就是乐观锁的一种实现方式，首先假设数据没有被修改，所以每次去操作数据时没有上锁。<br>在 Java 中 java.util.concurrent.atomic包的原子操作类就是使用 CAS 实现的。下面以AtomicInteger的部分代码片段来看，当需要更新变量值时，<br>会检查有没有冲突，如果存在冲突，则会重试，直到更新成功。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Atomically increments by one the current value.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the previous value</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">getAndIncrement</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> unsafe.getAndAddInt(<span class="built_in">this</span>, valueOffset, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">getAndAddInt</span><span class="params">(Object var1, <span class="type">long</span> var2, <span class="type">int</span> var4)</span> &#123;</span><br><span class="line">    <span class="type">int</span> var5;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        var5 = <span class="built_in">this</span>.getIntVolatile(var1, var2);</span><br><span class="line">    &#125; <span class="keyword">while</span>(!<span class="built_in">this</span>.compareAndSwapInt(var1, var2, var5, var5 + var4));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> var5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、CAS-的操作是怎样的？"><a href="#二、CAS-的操作是怎样的？" class="headerlink" title="二、CAS 的操作是怎样的？"></a>二、CAS 的操作是怎样的？</h3><p>CAS 的操作中包含有三个操作数，分别是：</p><pre><code>V--内存值A--需要进行比较的原预期值B--拟写入的新值</code></pre><p>更新变量时，会对 V内存值 与 A预期值 进行比较，如果相等 则把 V内存值 修改为 B新值</p><p>举一个栗子：<br>    最初内存值V &#x3D; 10<br>    1. 对线程1 ：来说 A预期值&#x3D;10 ， B拟更新值&#x3D;11；<br>        2. 此时存在线程2 抢先一步修改 V值&#x3D;11<br>        3. 线程1 要提交更新 V值，会比较内存值V 和 预期值B 是否相等，如果相等则提交更新，否则 更新失败，然后重试（也就是自旋）直到成功为止。<br>           因为线程2 抢先更新了 内存值V&#x3D;11, 线程1 进行 内存值V 与 预期值A 比较 发现 V!&#x3D;A  线程1提交修改失败。<br>        4. 线程1 自旋 重新获取到内存值V&#x3D;11，此时预期值A&#x3D;11, 新值B&#x3D;12，因为没有其他线程争抢改变内存值V，比较Compare 相等 更新SWAP 成功。此时内存值V&#x3D;12</p><p>与 <strong>Synchronized</strong> 对比来看，Synchronized属于悲观锁，一开始悲观的认为程序并发很严重，需要严格的防控，避免出现线程不安全问题出现。<br>而 <strong>CAS</strong> 则是乐观锁，乐观认为程序并发并不严重，可以让线程尝试不断的获取内存值比较并且更新。</p><h3 id="三、CAS缺点"><a href="#三、CAS缺点" class="headerlink" title="三、CAS缺点"></a>三、CAS缺点</h3><ul><li><p>CPU 开销大<br>  在并发较高的情况下，多个线程同时尝试争抢更新同一个资源，而又一直不成功，一直在不停的自旋，这样不停的重复，就会给CPU带来非常大的开销。</p></li><li><p>只能保证一个共享变量的原子操作，不能保证代码块的原子性操作。</p></li><li><p>ABA问题<br>比如两个线程   </p><ol><li>线程1 查询V&#x3D;a  与预期值 A&#x3D;a比较</li><li>线程2 查询V&#x3D;a  与预期值 A&#x3D;a 比较 相等 更新V&#x3D;b</li><li>线程2 查询V&#x3D;b  与预期值 A&#x3D;b 比较 相等 更新V&#x3D;a</li><li>线程1 与预期值 A&#x3D;a 比较 相等 更新V&#x3D;b</li></ol><p>从上面2、3步骤来看，V的值经历了 a-&gt;b b-&gt;a 的赋值过程。这就是著名的ABA问题。</p></li></ul><hr><p>  <em><strong>有可能出现的场景：</strong></em><br>    比如后台取款减少金额、转账收款增加金额分别在两个不同的线程。<br>    甲账户余额100，提现取款金额50<br>    线程1 内存值V&#x3D;100   预期值A&#x3D;100   拟更新值B&#x3D;50<br>    假设甲误操作多了一次，重复点击提现，又发起了一次提现请求 后台新增加一个 线程2<br>    线程2 内存值V&#x3D;100   预期值A&#x3D;100   拟更新值B&#x3D;50<br>    由于某种原因 线程2 被阻塞block 了，线程1 更新内存值V&#x3D;50 此时 乙向甲的账号转账 50<br>    线程3 内存值V&#x3D;50    预期值A&#x3D;50    拟更新值B&#x3D;100<br>    线程3执行完成后， 内存值V&#x3D;100， 此时线程2从block 中恢复过来，比较 V&#x3D;A 然后更新内存值V&#x3D;50<br>    最后甲的账户余额 &#x3D; (100-50+50-50)  而实际上应该是 &#x3D;(100-50+50)</p><hr><p>  看到一个很有意思的解答是，A的女朋友出轨了，然后又回到A的身边，那么这个女朋友还是A的女朋友吗？哈哈哈。</p><p>  模拟出现ABA代码如下<br>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] arg)</span>&#123;</span><br><span class="line">      <span class="type">AtomicInteger</span> <span class="variable">atomicInteger</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">10</span>);</span><br><span class="line">      <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">              atomicInteger.compareAndSet(<span class="number">10</span>,<span class="number">11</span>);</span><br><span class="line">              atomicInteger.compareAndSet(<span class="number">11</span>,<span class="number">10</span>);</span><br><span class="line">              System.out.println(<span class="string">&quot;t2 atomicInteger value is :&quot;</span>+atomicInteger.get());</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">              <span class="keyword">try</span> &#123;</span><br><span class="line">                  Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">              &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                  e.printStackTrace();</span><br><span class="line">              &#125;</span><br><span class="line">              atomicInteger.compareAndSet(<span class="number">10</span>,<span class="number">11</span>);</span><br><span class="line">              System.out.println(<span class="string">&quot;t2 atomicInteger value is :&quot;</span>+atomicInteger.get());</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      t1.start();</span><br><span class="line">      t2.start();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p><strong>那么如何避免出现ABA问题呢？</strong><br>在java.util.concurrent.atomic包下，提供了带有版本和标记的的原子引用类 <strong>AtomicStampedReference、AtomicMarkableReference</strong><br>可以通过版本控制来确保CAS操作中内存值的正确性。<br>使用如下:<br>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] arg)</span>&#123;</span><br><span class="line">    AtomicStampedReference&lt;Integer&gt; atomicInteger = <span class="keyword">new</span> <span class="title class_">AtomicStampedReference</span>&lt;Integer&gt;(<span class="number">10</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            atomicInteger.compareAndSet(<span class="number">10</span>,<span class="number">11</span>,atomicInteger.getStamp(),atomicInteger.getStamp()+<span class="number">1</span>);</span><br><span class="line">            atomicInteger.compareAndSet(<span class="number">11</span>,<span class="number">10</span>,atomicInteger.getStamp(),atomicInteger.getStamp()+<span class="number">1</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;t2 atomicInteger value is :&quot;</span>+atomicInteger.getReference());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">stamp</span> <span class="operator">=</span> atomicInteger.getStamp();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;t2 compareAndSet:&quot;</span>+atomicInteger.compareAndSet(<span class="number">10</span>,<span class="number">11</span>,stamp,stamp+<span class="number">1</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;t2 atomicInteger value is :&quot;</span>+atomicInteger.getReference());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    t1.start();</span><br><span class="line">    t2.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="四、CAS与Synchronized的使用情景："><a href="#四、CAS与Synchronized的使用情景：" class="headerlink" title="四、CAS与Synchronized的使用情景："></a>四、CAS与Synchronized的使用情景：</h3><ol><li>对于资源竞争较少（线程冲突较轻）的情况，使用synchronized同步锁进行线程阻塞和唤醒切换以及用户态内核态间的切换操作额外浪费消耗cpu资源；<br>而CAS基于硬件实现，不需要进入内核，不需要切换线程，操作自旋几率较少，因此可以获得更高的性能。</li><li>对于资源竞争严重（线程冲突严重）的情况，CAS自旋的概率会比较大，从而浪费更多的CPU资源，效率低于synchronized。</li></ol><p>想要获取更多关于CAS的信息，推荐 <a href="https://zh.wikipedia.org/wiki/%E6%AF%94%E8%BE%83%E5%B9%B6%E4%BA%A4%E6%8D%A2">https://zh.wikipedia.org/wiki/%E6%AF%94%E8%BE%83%E5%B9%B6%E4%BA%A4%E6%8D%A2</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;  本文主要是对于Java CAS 的学习整理加深记忆。&lt;br&gt;  有时候，很多知识都停留在印象中的大概了解，或者认识了名称，知道xxx名字概念的存在，&lt;br&gt;  或者曾经在xxx博客中看到过。对于学习这件事，如果只停留在看、思考的过程。即使有所有收获，没有真正的去实践，&lt;br&gt;  相信过不了多久也会遗之脑后。好记性不如烂笔头，至少也应该以文字记录自己的思考、实践过程作为输出，这样学习过程更为完美。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="http://cxinxian.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>jstat 的使用</title>
    <link href="http://cxinxian.github.io/2020/05/25/jvm-chapter-1/"/>
    <id>http://cxinxian.github.io/2020/05/25/jvm-chapter-1/</id>
    <published>2020-05-25T13:24:44.000Z</published>
    <updated>2021-06-05T00:49:06.369Z</updated>
    
    <content type="html"><![CDATA[<p>  在JVM 分析中，jstat 是一个不可缺少的工具。全称是“Java Virtual Machine statistics monitoring tool”，位于java的bin<br>  目录下，主要利用JVM内建的指令对Java应用程序的资源和性能进行实时的命令行的监控，包括了对Heap size和垃圾回收状况的监控。<br>  是一款轻量级的jvm工具。</p><span id="more"></span><p>  如果配置好JDK 环境后，在命令行中输入<code>jsata</code> 会显示出如下的语法结构。<br>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">invalid argument count</span><br><span class="line">Usage: jstat -help|-options</span><br><span class="line">       jstat -&lt;option&gt; [-t] [-h&lt;lines&gt;] &lt;vmid&gt; [&lt;interval&gt; [&lt;count&gt;]]</span><br></pre></td></tr></table></figure></p><h3 id="1-参数解析"><a href="#1-参数解析" class="headerlink" title="1.参数解析"></a>1.参数解析</h3><ul><li>-t： 可以在打印的列加上Timestamp列，用于显示系统运行的时间；</li><li>-h： 可以在周期性数据数据的时候，可以在指定输出多少行以后输出一次表头；</li><li>vmid： Virtual Machine ID（ 进程的 pid）；</li><li>interval： 采样时间间隔，单位为毫秒 （可指定单位，比如1秒：<code>jstat -gc 1000 1s</code>）；</li><li>count： 采样次数，用于指定输出多少次记录（如果指定了 interval 不指定count 则会一直打印下去）。</li></ul><h3 id="2-options-参数："><a href="#2-options-参数：" class="headerlink" title="2.options 参数："></a>2.options 参数：</h3>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">jstat -option</span><br><span class="line">-class                查看class loader 类装载和数量、总空间以及类装载耗费时间等数据</span><br><span class="line">-compiler             查看JIT编译器编译过的方法和耗时信息信息</span><br><span class="line">-gc                   查看Java 堆状况，Eden区、两个survivor区、老年代、元空间、已用空间、gc耗时等信息</span><br><span class="line">-gccapacity           与 -gc 作用基本一样，查看不同的generations（新生代、老生代、永久代）相应的heap容量信息，</span><br><span class="line">                      主要关注各区使用到的最大、最小空间</span><br><span class="line">-gccause              与gcutil作用一样，查看gc的情况，额外输出上次引起gc的原因</span><br><span class="line">-gcmetacapacity       显示 metaspace(元空间)的大小</span><br><span class="line">-gcnew                查看新生代的gc情况</span><br><span class="line">-gcnewcapacity        查看新生代gc时heap的容量信息</span><br><span class="line">-gcold                查看老生代的gc情况</span><br><span class="line">-gcoldcapacity        查看老生代gc时heap容量信息</span><br><span class="line">-gcutil               查看heap的gc情况，主要关注已使用空间占总空间的百分比</span><br><span class="line">-printcompilation     查看JIT编译器编译的方法信息</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-options-参数解析"><a href="#3-options-参数解析" class="headerlink" title="3.options 参数解析"></a>3.options 参数解析</h3><ul><li><p><strong>jstat -class &lt;pid&gt;</strong><br>&lt;pid&gt; 代表进程id 可通过 jps 查看 比如<code>jps -l</code><br>监视类装载、卸载数量、总空间以及耗费的时间</p><ul><li>Loaded        : 加载class的数量</li><li>Bytes         : class字节大小</li><li>Unloaded      : 未加载class的数量</li><li>Bytes         : 未加载class的字节大小</li><li>Time          : 加载时间</li></ul><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jstat -class 5644</span><br><span class="line">Loaded  Bytes  Unloaded  Bytes     Time</span><br><span class="line">69059 133660.9     4974  6488.3     735.78</span><br></pre></td></tr></table></figure></li><li><p><strong>jstat -compiler &lt;pid&gt;</strong><br>输出JIT编译过的方法数量耗时等</p><ul><li>Compiled              编译数量</li><li>Failed                编译失败数量</li><li>Invalid               无效数量</li><li>Time                  编译耗时</li><li>FailedType            失败类型</li><li>FailedMethod          失败方法的全限定名</li></ul><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jstat -compiler 5644</span><br><span class="line">Compiled Failed Invalid   Time   FailedType FailedMethod</span><br><span class="line">77919     12       0   698.76          1 com/intellij/psi/impl/JavaClassSupersImpl getSuperClassSubstitutor</span><br></pre></td></tr></table></figure></li><li><p><strong><span id="mark_gc">jstat -gc &lt;pid&gt;</span></strong><br>垃圾回收堆的行为统计，常见用用法比如<code>jstat -gc h3 5644 1s</code> 表示意思是：<br>每隔1s 输出一次进程id为5644 的gc 信息，h3：每隔三行输出一次title</p></li></ul><table><thead><tr><th>type</th><th>解析</th></tr></thead><tbody><tr><td>S0C</td><td>survivor0区的总容量</td></tr><tr><td>S1C</td><td>survivor1区的总容量</td></tr><tr><td>S0U</td><td>survivor0区已使用的容量</td></tr><tr><td>S1U</td><td>survivor1区已使用的容量</td></tr><tr><td>EC</td><td>Eden区(新生代)的总容量</td></tr><tr><td>EU</td><td>Eden区的已使用总容量</td></tr><tr><td>OC</td><td>olden去的总容量</td></tr><tr><td>OU</td><td>olden去已使用的容量</td></tr><tr><td>MC</td><td>metaspace(元空间)的总容量</td></tr><tr><td>MU</td><td>metaspace(元空间)已使用的容量</td></tr><tr><td>CCSC</td><td>压缩类空间的总容量</td></tr><tr><td>CCSU</td><td>压缩类空间已使用的容量</td></tr><tr><td>YGC</td><td>从应用程序启动到采样时年轻代中gc次数</td></tr><tr><td>YGCT</td><td>从应用程序启动到采样时年轻代中gc耗时(s)</td></tr><tr><td>FGC</td><td>从应用程序启动到采样时old代(全gc)gc次数</td></tr><tr><td>FGCT</td><td>从应用程序启动到采样时old代(全gc)gc所用时间(s)</td></tr><tr><td>GCT</td><td>从应用程序启动到采样时gc用的总时间(s)</td></tr></tbody></table><p>  作用效果如下：<br>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">jstat -gc -h3 5644 1s</span><br><span class="line">S0C    S1C    S0U    S1U     EC       EU       OC       OU       MC     MU    CCSC   CCSU   YGC    YGCT   FGC    FGCT  GCT</span><br><span class="line">20800.0 20800.0 14749.4 0.0  166720.0 164712.4 416376.0 266881.8  391032.0 361566.7 52148.0 46069.5  1012  15.257  38   7.222  22.478</span><br><span class="line">20800.0 20800.0  0.0  3788.4 166720.0  2843.0  416376.0 266881.8  391032.0 361606.6 52148.0 46078.1  1013  15.264  38   7.222  22.486</span><br><span class="line">20800.0 20800.0  0.0  3788.4 166720.0  7655.8  416376.0 266881.8  391032.0 361606.6 52148.0 46078.1  1013  15.264  38   7.222  22.486</span><br><span class="line">S0C    S1C    S0U    S1U     EC       EU       OC       OU       MC     MU    CCSC   CCSU   YGC    YGCT   FGC    FGCT  GCT</span><br><span class="line">20800.0 20800.0  0.0  3788.4 166720.0 12492.6  416376.0 266881.8  391032.0 361606.6 52148.0 46078.1  1013  15.264  38   7.222  22.486</span><br><span class="line">20800.0 20800.0  0.0  3788.4 166720.0 17402.9  416376.0 266881.8  391032.0 361606.6 52148.0 46078.1  1013  15.264  38   7.222  22.486</span><br><span class="line">20800.0 20800.0  0.0  3788.4 166720.0 22221.0  416376.0 266881.8  391032.0 361606.6 52148.0 46078.1  1013  15.264  38   7.222  22.486</span><br><span class="line">S0C    S1C    S0U    S1U     EC       EU       OC       OU       MC     MU    CCSC   CCSU   YGC    YGCT   FGC    FGCT  GCT</span><br></pre></td></tr></table></figure></p><ul><li><p><strong><span id="mark_gccapacity">jstat -gccapacity &lt;pid&gt;</span></strong><br>输出显示 新生代、老年代、元空间、压缩类空间的大小容量</p><ul><li>NGCMN     <em>：新生代最小容量</em></li><li>NGCMX     <em>：新生代最大容量</em></li><li>NGC       <em>：当前新生代容量</em></li><li>S0C       <em>：第一个幸存区大小</em></li><li>S1C       <em>：第二个幸存区的大小</em></li><li>EC        <em>：伊甸园区的大小</em></li><li>OGCMN     <em>：老年代最小容量</em></li><li>OGCMX     <em>：老年代最大容量</em></li><li>OGC       <em>：老年代容量大小</em></li><li>OC        <em>；当前老年代空间容量大小</em></li><li>MCMN      <em>；最小元数据容量</em></li><li>MCMX      <em>：最大元数据容量</em></li><li>MC        <em>：当前元数据空间大小</em></li><li>CCSMN     <em>：最小压缩类空间大小</em></li><li>CCSMX     <em>：最大压缩类空间大小</em></li><li>CCSC      <em>：当前压缩类空间大小</em></li><li>YGC       <em>：年轻代gc次数</em></li><li>FGC       <em>：老年代GC次数</em></li></ul><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jstat -gccapacity 5960</span><br><span class="line"> NGCMN    NGCMX     NGC     S0C   S1C      EC     OGCMN    OGCMX     OGC    OC    MCMN     MCMX     MC   CCSMN  CCSMX  CCSC    YGC    FGC</span><br><span class="line"> 43648.0 256000.0 165056.0 16448.0 16448.0 132160.0  87424.0  512000.0  329960.0  329960.0  0.0 1320960.0 313844.0 0.0 1048576.0  42800.0    344    21</span><br></pre></td></tr></table></figure></li><li><p><strong>jstat -gcutil &lt;pid&gt;</strong><br> 输出显示 gc 新生代，老年代、元空间、压缩类空间已使用空间占总空间的百分比</p><ul><li>S0     <em>：新生代survior space 0区已使用空间容量占比</em></li><li>S1     <em>：新生代survior space 1区已使用空间容量占比</em></li><li>E      <em>：新生代已使用空间容量占比</em></li><li>O      <em>：老年代已使用空间容量占比</em></li><li>M      <em>：元空间已使用空间容量占比</em></li><li>CCS    <em>：压缩类空间已使用空间容量占比</em></li><li>YGC    <em>：从应用启动到采样发生Yang GC 次数</em></li><li>YGCT   <em>：从应用启动到采样发生Yang GC 次数耗时</em></li><li>FGC    <em>：从应用启动到采样发生Full GC 次数</em></li><li>FGCT   <em>：从应用启动到采样发生Yang GC 次数耗时</em></li><li>GCT    <em>：从应用启动到采样，发生GC 总耗时</em></li></ul></li></ul><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">jstat -gcutil 5960 1s 5</span><br><span class="line">S0     S1     E      O      M     CCS    YGC     YGCT    FGC    FGCT     GCT</span><br><span class="line">66.74   0.00  98.54  52.43  92.63  88.42    470    5.920    27    4.296   10.216</span><br><span class="line">66.74   0.00 100.00  52.43  92.63  88.42    470    5.920    27    4.296   10.216</span><br><span class="line">0.00  61.97   3.62  52.43  92.64  88.43    471    5.927    27    4.296   10.224</span><br></pre></td></tr></table></figure><p>分析：<br>1、从第二行到第三行之间发生了一次新生代的gc，耗时为0.008s，新生代的使用率由100% 下降到 3.62%，其中新生代中的对象没有提升到老生代，而压缩类空间则由88.42% 增加到88.43%。<br>2、幸存区s0 的使用率由 66.74% 下降到 61.97%</p><ul><li><strong>jstat -gccause &lt;pid&gt;</strong><br>作用于 <code>-gcutil</code> 一样，只是比它多两个统计输出数据，分别是<ul><li>LGCC  <em>：最近垃圾回收原因</em></li><li>GCC   <em>：当前垃圾回收原因</em></li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jstat -gccause 5960</span><br><span class="line">S0     S1     E      O      M     CCS    YGC     YGCT    FGC    FGCT     GCT    LGCC                 GCC</span><br><span class="line">26.00   0.00  67.43  75.54  93.04  88.84    428    5.133    23    1.580    6.713 Allocation Failure   No GC</span><br></pre></td></tr></table></figure><ul><li><p><strong>jstat -gcmetacapacity &lt;pid&gt;</strong><br>显示对应pid 的元空间的容量信息，相对 <code>jstat -gccapacity &lt;pid&gt;</code> 来说，<br><code>jstat -gcmetacapacity &lt;pid&gt;</code> 只是关注于元空间的容量信息，对应的title 解析可参照上面 <a href="#mark_gccapacity">jstat -gccapacity <pid></a>中的解析。<br>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jstat -gcmetacapacity 5960</span><br><span class="line"> MCMN       MCMX        MC       CCSMN      CCSMX       CCSC     YGC   FGC    FGCT     GCT</span><br><span class="line"> 0.0  1347584.0   343668.0        0.0  1048576.0    46256.0   450    26    3.647    9.224</span><br></pre></td></tr></table></figure></li><li><p><strong>jstat -gcnew &lt;pid&gt;</strong><br>查看新生代gc情况，相关字段解析上面<a href="#mark_gc">jstat -gc</a> 已有解析，而其中差异的字段解析如下：</p><ul><li>S0U   <em>： survivor space 0 utilization</em></li><li>TT    <em>： tenuring threshold 阀值， 用于控制对象在新生代存活的最大次数</em></li><li>MTT   <em>：对象在新生代存活的最大次数</em></li><li>DSS   <em>：desired survivor Size 期望的幸存区大小</em></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jstat -gcnew 5960</span><br><span class="line">S0C    S1C    S0U    S1U   TT MTT  DSS      EC       EU     YGC     YGCT</span><br><span class="line">16448.0 16448.0    0.0 1444.8  6   6 8224.0 132160.0 114328.5    457    5.657</span><br></pre></td></tr></table></figure></li><li><p><strong>jstat -gcoldcapacity &lt;pid&gt;</strong><br>查看老年代空间容量信息</p><ul><li>OGC： old generation capacity 老生代空间大小(kb)</li><li>OGCMN：最小OGC</li><li>OGCMX： 最大OGC</li><li>OC： old space capacity</li><li>FGC： Full  GC</li><li>OGC： old generation capacity</li></ul><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">jstat -gcoldcapacity -h3 12628 1s</span><br><span class="line">OGCMN       OGCMX        OGC         OC       YGC   FGC    FGCT     GCT</span><br><span class="line">87552.0    478208.0     87552.0     87552.0     3     0    0.000    0.012</span><br><span class="line">87552.0    478208.0     87552.0     87552.0     3     0    0.000    0.012</span><br><span class="line">87552.0    478208.0     87552.0     87552.0     3     0    0.000    0.012</span><br></pre></td></tr></table></figure><p>分析：<br>采样期间，没有经历gc,老年代容量OGC：87552 kb， 当前老年代空间容量：87552 kb，而老年代最大容量为：478208kb<br>说明还有上升空间</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;  在JVM 分析中，jstat 是一个不可缺少的工具。全称是“Java Virtual Machine statistics monitoring tool”，位于java的bin&lt;br&gt;  目录下，主要利用JVM内建的指令对Java应用程序的资源和性能进行实时的命令行的监控，包括了对Heap size和垃圾回收状况的监控。&lt;br&gt;  是一款轻量级的jvm工具。&lt;/p&gt;</summary>
    
    
    
    
    <category term="jvm" scheme="http://cxinxian.github.io/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu虚拟机编译ijkplayer</title>
    <link href="http://cxinxian.github.io/2018/11/10/Ubuntu-compile-ijkplayer/"/>
    <id>http://cxinxian.github.io/2018/11/10/Ubuntu-compile-ijkplayer/</id>
    <published>2018-11-10T12:21:29.000Z</published>
    <updated>2021-06-05T00:49:45.754Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>近段时间项目开发中需要视频播放器，于是开始搜索相关资料了解到ijkplayer是一个很不错的开源的轻量级视频播放器，<br>支持播放本地网络视频，也支持流媒体播放。是Bilibili基于ffmpeg开发的，支持Android&amp;iOS。<br>虽然Vitamio也很强大，但只是面对个人开放，就pass好了，接下来就直接进入主题。</p><span id="more"></span><h3 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h3><p>Ubuntu  18.04.1<br>至于怎么在虚拟机中安装Ubuntu就不说了，百度有一堆教程[手动捂脸]</p><h4 id="1-下载SDK、jdk、ndk-并配置环境"><a href="#1-下载SDK、jdk、ndk-并配置环境" class="headerlink" title="1.下载SDK、jdk、ndk 并配置环境"></a>1.下载SDK、jdk、ndk 并配置环境</h4><p>jdk 1.8.0_191<br>ndk r14b</p><p>用vim 打开profile文件配置环境变量<br><code>vim /etc/profile</code><br>如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#java</span><br><span class="line">export JAVA_HOME=/usr/devkit/java/jdk1.8.0_191</span><br><span class="line">export JRE_HOME=/usr/devkit/java/jdk1.8.0_191/jre</span><br><span class="line">export CLASSPATH=.:$CLASSPATH:$JAVA_HOME/lib:$JAVA_HOME/jre/lib</span><br><span class="line">export PATH=$JAVA_HOME/bin:$JAVA_HOME/jre/bin:$PATH:$HOME/bin</span><br><span class="line"></span><br><span class="line">#ndk</span><br><span class="line">export ANDROID_NDK=/usr/devkit/ndk/android-ndk-r14b</span><br><span class="line">export PATH=$ANDROID_NDK:$PATH</span><br><span class="line"></span><br><span class="line">#sdk</span><br><span class="line">export ANDROID_SDK=/usr/devkit/sdk/android-sdk-linux</span><br><span class="line">export PATH=$&#123;PATH&#125;:$ANDROID_SDK/tools:$ANDROID_SDK/platform-tools</span><br></pre></td></tr></table></figure><p>保存文件并退出然后执行下面的命令让配置生效<br><code>source /etc/profile</code></p><hr><p>测试环境是否已经配置好，执行如下命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure><p><img src="/assets/blogImg/Ubuntu-compile-ijkplayer/java-version.png" alt="图1"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ndk-build -v</span><br></pre></td></tr></table></figure><p><img src="/assets/blogImg/Ubuntu-compile-ijkplayer/ndk-build-v.png" alt="图2"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android</span><br></pre></td></tr></table></figure><p><img src="/assets/blogImg/Ubuntu-compile-ijkplayer/android-sdkmrg.png" alt="图3"></p><p>如果git 和yasm没有安装的话需要执行下面的命令进行安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get install git</span><br><span class="line">apt-get install yasm</span><br></pre></td></tr></table></figure><h4 id="2-下载ijkplayer源码"><a href="#2-下载ijkplayer源码" class="headerlink" title="2.下载ijkplayer源码"></a>2.下载ijkplayer源码</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/Bilibili/ijkplayer.git ijkplayer-android</span><br></pre></td></tr></table></figure><h4 id="3-初始化android并开始编译ijkplayer-Android"><a href="#3-初始化android并开始编译ijkplayer-Android" class="headerlink" title="3.初始化android并开始编译ijkplayer-Android"></a>3.初始化android并开始编译ijkplayer-Android</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ijkplayer-android</span><br><span class="line">./init-android.sh</span><br></pre></td></tr></table></figure><p>初始化过程会耗费不少时间，需要从网上拉取代码<br>此外如果视频播放需要支持Https协议，需要执行如下命令<br><code>./init-android-openssl.sh</code></p><hr><h4 id="4-配置模式"><a href="#4-配置模式" class="headerlink" title="4.配置模式"></a>4.配置模式</h4><p>在 ijkplayer-android&#x2F;config 目录下官方提供了三个编译FFmpeg的配置文件模板给我们使用：</p><ul><li>module-default.sh：默认，最后生成的文件同时支持ts格式的视频,例如一些电视台的m3u8 格式</li><li>module-lite-hevc.sh：相对于module-lite.sh多了hevc功能</li><li>module-lite.sh：如果你更喜欢较小的二进制大小的编解码器&#x2F;格式，不支持ts格式的视频</li></ul><p>如果需要支持直播流(rstp\rtp）、rmvb支持等等，可在模板文件中添加相应的配置，并替换原有的module.sh<br>下面就module-lite.sh 文件添加相关配置进行演示<br>打开该文件，找到<br><code>export COMMON_FF_CFG_FLAGS=&quot;$COMMON_FF_CFG_FLAGS --disable-protocol=rtp&quot;</code><br>修改为以下，就可以打开rtsp协议了。<br><code>export COMMON_FF_CFG_FLAGS=&quot;$COMMON_FF_CFG_FLAGS --enable-protocol=rtp&quot;</code><br>然后继续添加以下一行，打开rtsp音视频分离器<br><code>export COMMON_FF_CFG_FLAGS=&quot;$COMMON_FF_CFG_FLAGS --enable-demuxer=rtsp&quot;&quot;</code><br>然后执行以下命令，连接配置文件</p><ul><li>为避免出现缺少ID为8的codec的错误*，还需要添加下面代码</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export COMMON_FF_CFG_FLAGS=&quot;$COMMON_FF_CFG_FLAGS --enable-decoder=mjpeg&quot;</span><br><span class="line">export COMMON_FF_CFG_FLAGS=&quot;$COMMON_FF_CFG_FLAGS --enable-demuxer=mjpeg&quot;</span><br></pre></td></tr></table></figure><p>添加mkv、rmvb支持</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export COMMON_FF_CFG_FLAGS=&quot;$COMMON_FF_CFG_FLAGS --enable-muxer=matroska</span><br><span class="line">export COMMON_FF_CFG_FLAGS=&quot;$COMMON_FF_CFG_FLAGS --enable-muxer=matroska_audio</span><br><span class="line">export COMMON_FF_CFG_FLAGS=&quot;$COMMON_FF_CFG_FLAGS --enable-demuxer=matroska</span><br></pre></td></tr></table></figure><p>然后通过如下命令重新产生module.sh文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rm module.sh</span><br><span class="line">ln -s module-lite.sh module.sh</span><br><span class="line">source module.sh</span><br></pre></td></tr></table></figure><hr><h4 id="5-开始编译"><a href="#5-开始编译" class="headerlink" title="5.开始编译"></a>5.开始编译</h4><p>编译之前先执行下命令清除一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd android/contrib</span><br><span class="line">./compile-openssl.sh clean</span><br><span class="line">./compile-ffmpeg.sh clean</span><br></pre></td></tr></table></figure><ul><li>编译各个平台openssl<br><code>./compile-openssl.sh all</code></li><li>编译各个平台ffmpeg<br><code>./compile-ffmpeg.sh all</code></li><li>编译各个平台ijkplayer</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ../</span><br><span class="line">./compile-ijk.sh all</span><br></pre></td></tr></table></figure><p>如果在编译过程中出现类似于以下错误,很有可能是没有安装python,<br>可通过<code>apt install python</code> 命令来安装就行了，接着在编译就OK了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">build on Linux x86_64</span><br><span class="line">ANDROID_NDK=/usr/devkit/ndk/android-ndk-r14b</span><br><span class="line">IJK_NDK_REL=14.1.3816874</span><br><span class="line">NDKr14.1.3816874 detected</span><br><span class="line">HOST_OS=linux</span><br><span class="line">HOST_EXE=</span><br><span class="line">HOST_ARCH=x86_64</span><br><span class="line">HOST_TAG=linux-x86_64</span><br><span class="line">HOST_NUM_CPUS=2</span><br><span class="line">BUILD_NUM_CPUS=4</span><br><span class="line">Auto-config: --arch=arm</span><br><span class="line">ERROR: Failed to create toolchain.</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;近段时间项目开发中需要视频播放器，于是开始搜索相关资料了解到ijkplayer是一个很不错的开源的轻量级视频播放器，&lt;br&gt;支持播放本地网络视频，也支持流媒体播放。是Bilibili基于ffmpeg开发的，支持Android&amp;amp;iOS。&lt;br&gt;虽然Vitamio也很强大，但只是面对个人开放，就pass好了，接下来就直接进入主题。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Android" scheme="http://cxinxian.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>sqlite数据库升级</title>
    <link href="http://cxinxian.github.io/2018/08/05/sqlite%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8D%87%E7%BA%A7/"/>
    <id>http://cxinxian.github.io/2018/08/05/sqlite%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8D%87%E7%BA%A7/</id>
    <published>2018-08-05T15:35:02.000Z</published>
    <updated>2021-06-05T00:49:32.105Z</updated>
    
    <content type="html"><![CDATA[<p>在本篇文章中主要是记录在android 开发中需要对sqlite数据库进行更新的一些实践与总结。希望在往后的开发中遇到同样的问题时能够帮助自己快速的回想起来。</p><span id="more"></span><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>在android开发中我们一般都会需要不停的对应用进行优化更新升级，添加新功能也好，界面优化也好，或者bug修复也好，都需要持续的在不影响原有功能正常使用的情况下对app 进行迭代更新。如果我们的app 使用到sqlite数据库，那么掌握对sqlite数据库更新的技巧是非常有必要的，比如，新功能需要新增数据表记录数据，或者在原有功能上做拓展，需要数据库新增字段进行支持等等。</p><h4 id="数据库升级分析"><a href="#数据库升级分析" class="headerlink" title="数据库升级分析"></a>数据库升级分析</h4><p>数据库升级大概就分为以下几种情形：</p><ul><li>1.表的增加</li><li>2.表的删除</li><li>3.表的修改<ul><li>3.1.字段增加</li><li>3.2.字段删除</li></ul></li></ul><p>通过图形示例，大致上，数据库的升级大概有以下几种情况， 有一个版本一个版本接着升级，也有跨版本升级的。</p><p><img src="/assets/blogImg/sqlite%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8D%87%E7%BA%A7/pic1.jpg" alt="pic1"></p><p>通常地，我们操作sqlite 数据库都需要继承 <strong>SQLiteOpenHelper</strong> 类并实现<code>onCreate、onUpgrade</code>方法，它是sqlite 数据库的管理操作工具类，主要作用有 打开或者关闭sqlite 数据库、创建、增、删、改、版本更新。</p><p>实际开发中，数据库的创建是通过在子类构造方法调用父类的构造实现。示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 构造器.</span></span><br><span class="line"><span class="comment"> * 参数1：context 上下文</span></span><br><span class="line"><span class="comment"> * 参数2：数据库名称</span></span><br><span class="line"><span class="comment"> * 参数3：CursorFactory 游标工厂，主要是为了创建 cursor，默认为空</span></span><br><span class="line"><span class="comment"> * 参数4：version 当前数据库版本</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> context the context</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">MyDbHelper</span><span class="params">(Context context)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>(context, AppConstants.DBNAME, <span class="literal">null</span>, <span class="number">3</span>);</span><br><span class="line">    <span class="comment">//第一次创建数据库的时候回调该方法</span></span><br><span class="line"><span class="comment">//当使用getReadableDatabase()方法获取数据库实例的时候, 如果数据库不存在, 就会调用这个方法</span></span><br><span class="line">    db = <span class="built_in">this</span>.getWritableDatabase();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="首次安装"><a href="#首次安装" class="headerlink" title="首次安装"></a>首次安装</h5><p>用户在第一次安装的时候会执行<code>onCreate</code> 方法，在该方法中，我们可以创建数据表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(SQLiteDatabase db)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;CREATE TABLE &quot;</span> +</span><br><span class="line">        <span class="string">&quot;tb_student(&quot;</span> +</span><br><span class="line">        <span class="string">&quot;id INTEGER PRIMARY KEY AUTOINCREMENT, &quot;</span> +</span><br><span class="line">        <span class="string">&quot;name varchar(64),&quot;</span> +</span><br><span class="line">        <span class="string">&quot;studentNo varchar(64)&quot;</span> +</span><br><span class="line">        <span class="string">&quot;)&quot;</span>;</span><br><span class="line">    db.execSQL(sql);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设有最开始只有一个学生表 <code>tb_student</code>， 作为第一个版本 <code>V1</code>，只有几个字段，分别是 id、name、studentNo 这三个字段。</p><h5 id="V1—-V2-升级"><a href="#V1—-V2-升级" class="headerlink" title="V1—&gt;V2 升级"></a>V1—&gt;V2 升级</h5><p>后面由于业务需要，应该记录学生地址信息，需要在表添加 address 字段。因此在升级APP的同时需要更新数据库的版本。此时会出现两种情况。</p><ul><li><p>case1: V1-&gt;V2（旧版本更新到新版本）</p><p>由旧版本更新到最新版本, 此时在 <strong>SQLiteOpenHelper</strong>  的子类中，会执行 <code>onUpgrade</code> 方法，但不会执行 <code>onCreate</code> 方法。</p></li><li><p>case2: 新用户直接安装V2</p><p>新用户直接安装V2或者卸载后重新安装APP，会执行 <code>onCreate</code> 方法，不会执行<code>onUpgrade</code> 方法</p></li></ul><p>在升级的过程中我们需要兼容这两种情况，那么改进后的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(SQLiteDatabase db)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;CREATE TABLE &quot;</span> +</span><br><span class="line">        <span class="string">&quot;tb_student(&quot;</span> +</span><br><span class="line">        <span class="string">&quot;id INTEGER PRIMARY KEY AUTOINCREMENT, &quot;</span> +</span><br><span class="line">        <span class="string">&quot;name varchar(64),&quot;</span> +</span><br><span class="line">        <span class="string">&quot;studentNo varchar(64)&quot;</span> +</span><br><span class="line">        <span class="string">&quot;)&quot;</span>;</span><br><span class="line">    db.execSQL(sql);</span><br><span class="line">    updateToVersion2(db);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onUpgrade</span><span class="params">(SQLiteDatabase db, <span class="type">int</span> oldVersion, <span class="type">int</span> newVersion)</span> &#123;</span><br><span class="line">    updateToVersion2(db);     </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数据库更新到版本2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateToVersion2</span><span class="params">(db)</span>&#123;</span><br><span class="line">    <span class="comment">// 表添加字段</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;ALTER TABLE tb_student ADD COLUMN address varchar&quot;</span>;</span><br><span class="line">    db.execSQL(sql);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="V2-V3-升级"><a href="#V2-V3-升级" class="headerlink" title="V2-&gt;V3 升级"></a>V2-&gt;V3 升级</h5><p>随着生产发展，业务需求也在不断的变化，对APP的提出更多要求时，我们需要实时地调整来服务好用户。比如需要记录用户的 年龄，性别信息是，这时我们的 <code>tb_student</code> 表需要添加 age、gender字段。而这时会出现三种情况。</p><ul><li>case1: 用户重装或者新用户安装</li><li>case2: 用户由V1-&gt;V3</li><li>case3: 用户由V2-&gt;V3</li></ul><p>由此我们会发现随着版本的迭代次数增加，用户更新APP的的情况也会增加。为了兼顾各个版本，因此我们需要适当的对上面的代码进行调整。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(SQLiteDatabase db)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;CREATE TABLE &quot;</span> +</span><br><span class="line">        <span class="string">&quot;tb_student(&quot;</span> +</span><br><span class="line">        <span class="string">&quot;id INTEGER PRIMARY KEY AUTOINCREMENT, &quot;</span> +</span><br><span class="line">        <span class="string">&quot;name varchar(64),&quot;</span> +</span><br><span class="line">        <span class="string">&quot;studentNo varchar(64)&quot;</span> +</span><br><span class="line">        <span class="string">&quot;)&quot;</span>;</span><br><span class="line">    db.execSQL(sql);</span><br><span class="line">    onUpgrade(db,<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onUpgrade</span><span class="params">(SQLiteDatabase db, <span class="type">int</span> oldVersion, <span class="type">int</span> newVersion)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=oldVersion; i&lt;newVersion; i++)&#123;</span><br><span class="line">        <span class="keyword">switch</span> (i)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                updateToVersion2(db);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                updateToVersion3(db);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数据库更新到版本2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateToVersion2</span><span class="params">(db)</span>&#123;</span><br><span class="line">    <span class="comment">// 表添加字段</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;ALTER TABLE tb_student ADD COLUMN address varchar&quot;</span>;</span><br><span class="line">    db.execSQL(sql);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数据库更新到版本3</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateToVersion3</span><span class="params">(db)</span>&#123;</span><br><span class="line">    <span class="comment">// 表字段增加</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">addCol_age</span> <span class="operator">=</span> <span class="string">&quot;ALTER TABLE tb_student ADD COLUMN age varchar&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">addCol_gender</span> <span class="operator">=</span> <span class="string">&quot;ALTER TABLE tb_student ADD COLUMN gender varchar&quot;</span>;</span><br><span class="line">    db.execSQL(addCol_age);</span><br><span class="line">    db.execSQL(addCol_gender);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过 for 循环从最开始的版本遍历到最新的版本，然后 switch 指定每一个版本对应需要更新的内容，可以无遗漏的把每一个落后的版本更新到最新的版本，兼容了一个一个版本的迭代以及跨版本迭代的问题，此外，也兼顾了新安装即最新版本。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在本篇文章中主要是记录在android 开发中需要对sqlite数据库进行更新的一些实践与总结。希望在往后的开发中遇到同样的问题时能够帮助自己快速的回想起来。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Android" scheme="http://cxinxian.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>2017书单</title>
    <link href="http://cxinxian.github.io/2017/12/20/essay-Diary-one/"/>
    <id>http://cxinxian.github.io/2017/12/20/essay-Diary-one/</id>
    <published>2017-12-20T05:14:54.000Z</published>
    <updated>2021-06-05T00:47:00.264Z</updated>
    
    <content type="html"><![CDATA[<p>回首2017，很庆幸自己能够利用一些碎片时间来读一下书，也感激自己没有懈怠。</p><p>– 读书的意义是为了<br>看到更大的世界</p><span id="more"></span><ul><li>明朝那些事儿(done)</li><li>半小时漫画中国史(done)</li><li>目送：龙应台“人生三书”之三(pending)</li><li>摆渡人(done)</li><li>谁动了我的奶酪(done)</li><li>从你的全世界路过(done)</li><li>有情世界(pending)</li><li>浪潮之巅(pending)</li><li>大话设计模式(pending)</li></ul><p><img src="/assets/blogImg/essay-Diary-one/mmexport1515078864559.jpg"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;回首2017，很庆幸自己能够利用一些碎片时间来读一下书，也感激自己没有懈怠。&lt;/p&gt;
&lt;p&gt;– 读书的意义是为了&lt;br&gt;看到更大的世界&lt;/p&gt;</summary>
    
    
    
    
    <category term="随笔" scheme="http://cxinxian.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="写作" scheme="http://cxinxian.github.io/tags/%E5%86%99%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>SQL备忘录一</title>
    <link href="http://cxinxian.github.io/2017/11/30/SQL-Memo/"/>
    <id>http://cxinxian.github.io/2017/11/30/SQL-Memo/</id>
    <published>2017-11-30T15:12:27.000Z</published>
    <updated>2021-06-05T00:49:23.222Z</updated>
    
    <content type="html"><![CDATA[<p>公司开始每周一次分享会，老前辈分享了些SQL方面的知识，值得记录。<br>于是我又重新拾起我的hexo。<br>回看这时间跨度也太长了…[手动捂脸]<br>感觉我错过来太多精彩没有记录下来，罪过罪过，还好现在也不算太晚。。。</p><span id="more"></span><h3 id="一、SQL优化"><a href="#一、SQL优化" class="headerlink" title="一、SQL优化"></a>一、SQL优化</h3><p>1、对查询优化，尽量避免全表扫描，优先考虑在<code>where</code>及<code>order by</code> 涉及的列上建立索引</p><p>2、避免在<code>where</code>字句中对字段进行<code>null、!=、&lt;&gt;</code> 判断或者or连接条件，否则引擎放弃使用索引而进行全表扫描。<br>    eg:<br>    <code>select * from A where column is null or column=0</code><br>    改成:<br>    <code>select * from A where  isnull(column,0)</code></p><pre><code>尽量不给字段留NULL，尽可能使用NOT NULL；因为当字段为 char(100) 型，建立字段时，空间就固定，不管是否有值(包含NULL)，都占用100个字符空间；如果是varchar可变长字段，null不占用空间。</code></pre><p>3、对in 和 not in 要慎用，否则也会导致全盘扫描<br>对于连续数据，能用between 就不用in<br>    eg:<br>    <code>select * from A where num in (1,2,3)</code><br>    改成：<br>    <code>select * from A where num between 1 and 3</code><br>大多时候用exists 代替 in<br><code>select num from A where num in(select num from B)</code><br>改为：<br><code>select num from A where exists(select 1 from B where num=A.num)</code></p><p>4、索引的创建要与应用结合考虑，建议大的OLTP表不要超过6个索引。</p><p>5、尽可能的使用索引字段作为查询条件，尤其是聚簇索引，必要时可以通过index index_name来强制指定索引   如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select id from t where num=@num</span><br><span class="line">//可以改为强制查询使用索引：</span><br><span class="line">select id from t with(index(索引名)) where num=@num</span><br></pre></td></tr></table></figure><p>在使用索引字段作为条件时，如果该索引是联合索引，那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，否则该索引将不会被使用。<br>要注意索引的维护，周期性重建索引，重新编译存储过程。</p><h3 id="二、SQL使用规范"><a href="#二、SQL使用规范" class="headerlink" title="二、SQL使用规范"></a>二、SQL使用规范</h3><p>1、尽量不使用游标，因为效率差；<br>2、如果操作数据超过1w,应当改写游标</p><h3 id="三、存储过程"><a href="#三、存储过程" class="headerlink" title="三、存储过程"></a>三、存储过程</h3><blockquote><p><strong>概念：</strong><br>存储过程Procedure是一组为了完成特定功能的SQL语句集合，经编译后存储在数据库中，用户通过指定存储过程的名称并给出参数来执行。<br>存储过程中可以包含逻辑控制语句和数据操纵语句，它可以接受参数、输出参数、返回单个或多个结果集以及返回值。</p></blockquote><p><strong>作用及优点：</strong></p><ul><li>增强数据的完整性</li><li>复杂业务规则和约束的一致实现</li><li>模块化设计</li><li>可维护性</li><li>降低网络通讯量</li><li>提高执行效率</li><li>较强的安全性</li></ul><p>由于存储过程在创建时即在数据库服务器上进行了编译并存储在数据库中，所以存储过程运行要比单个的SQL语句块要快。同时由于在调用时只需用提供存储过程名和必要的参数信息，所以在一定程度上也可以减少网络流量、简单网络负担。</p><p><strong>具体使用</strong></p><p>例子：更新用户密码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> proc update_user_pwd</span><br><span class="line"><span class="variable">@usr</span> <span class="type">varchar</span>(<span class="number">50</span>), <span class="comment">--输入变量，接收用户名</span></span><br><span class="line"><span class="variable">@old_pwd</span> <span class="type">varchar</span>(<span class="number">500</span>),<span class="comment">--输入变量，接收旧密码</span></span><br><span class="line"><span class="variable">@new_pwd</span> <span class="type">varchar</span>(<span class="number">500</span>),<span class="comment">--输入变量，接收新密码</span></span><br><span class="line"><span class="variable">@res</span> <span class="type">int</span> Output   <span class="comment">--输出变量，输出结果标志 0：成功； -1：用户名错误； -2：旧密码错误</span></span><br><span class="line"><span class="keyword">As</span></span><br><span class="line">if <span class="keyword">exists</span>(<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_user <span class="keyword">where</span> username <span class="operator">=</span> <span class="variable">@usr</span>)</span><br><span class="line">if <span class="keyword">exists</span>(<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_user <span class="keyword">where</span> username <span class="operator">=</span> <span class="variable">@usr</span> <span class="keyword">and</span> passworld <span class="operator">=</span> <span class="variable">@pwd</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">update</span> tb_user <span class="keyword">set</span> passworld <span class="operator">=</span> <span class="variable">@new_pwd</span> <span class="keyword">where</span> username <span class="operator">=</span> <span class="variable">@usr</span></span><br><span class="line"><span class="keyword">set</span> <span class="variable">@res</span> <span class="operator">=</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">select</span> <span class="variable">@res</span> <span class="operator">=</span> <span class="number">-2</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">select</span> <span class="variable">@res</span> <span class="operator">=</span> <span class="number">-1</span></span><br><span class="line"><span class="keyword">return</span> <span class="variable">@res</span></span><br></pre></td></tr></table></figure><p>实现分页查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--使用row_number函数分页</span></span><br><span class="line">if OBJECT_ID (N<span class="string">&#x27;PROC_SELECT_BY_PAGE&#x27;</span>, N<span class="string">&#x27;P&#x27;</span>) <span class="keyword">IS</span> <span class="keyword">NOT NULL</span></span><br><span class="line">    <span class="keyword">drop</span> <span class="keyword">procedure</span> PROC_SELECT_BY_PAGE;</span><br><span class="line">gO</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> PROC_SELECT_BY_PAGE</span><br><span class="line">    <span class="variable">@startIndex</span> <span class="type">int</span>,</span><br><span class="line">    <span class="variable">@endIndex</span> <span class="type">int</span></span><br><span class="line"><span class="keyword">as</span></span><br><span class="line">    <span class="keyword">select</span>  <span class="operator">*</span> <span class="keyword">from</span> (<span class="keyword">select</span> id,name,age,sex,<span class="built_in">row_number</span>() <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> id <span class="keyword">desc</span>) <span class="keyword">as</span> rownumber <span class="keyword">from</span> tb_user) <span class="keyword">as</span> Temp</span><br><span class="line">    <span class="keyword">where</span> Temp.rownumber <span class="keyword">between</span> <span class="variable">@startIndex</span> <span class="keyword">AND</span> <span class="variable">@endIndex</span></span><br><span class="line">go</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">--使用top 分页查询</span></span><br><span class="line">使用row_number函数分页</span><br><span class="line">if OBJECT_ID (N<span class="string">&#x27;PROC_SELECT_BY_PAGE_top&#x27;</span>, N<span class="string">&#x27;P&#x27;</span>) <span class="keyword">IS</span> <span class="keyword">NOT NULL</span></span><br><span class="line">    <span class="keyword">drop</span> <span class="keyword">procedure</span> PROC_SELECT_BY_PAGE_top;</span><br><span class="line">gO</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> PROC_SELECT_BY_PAGE_top</span><br><span class="line">    <span class="variable">@pageIndex</span> <span class="type">int</span>,</span><br><span class="line">    <span class="variable">@pageSize</span> <span class="type">int</span></span><br><span class="line"><span class="keyword">as</span></span><br><span class="line">    <span class="keyword">select</span> top(pageSize) <span class="operator">*</span> <span class="keyword">from</span> tb_user <span class="keyword">where</span> id <span class="operator">&gt;=</span> (<span class="keyword">select</span> <span class="built_in">max</span>(id) <span class="keyword">from</span> (<span class="keyword">select</span> top(pageSize<span class="operator">*</span>(pageIndex<span class="number">-1</span>)<span class="operator">+</span><span class="number">1</span> <span class="keyword">from</span> tb_user) id <span class="keyword">from</span> tb_user <span class="keyword">order</span> <span class="keyword">by</span> id)<span class="keyword">as</span> Temp)</span><br><span class="line">go</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">点点滴滴就是积累</summary>
    
    
    
    <category term="SQL" scheme="http://cxinxian.github.io/categories/SQL/"/>
    
    
    <category term="SQL" scheme="http://cxinxian.github.io/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>Windows下搭建git远程代码仓库</title>
    <link href="http://cxinxian.github.io/2016/08/07/git-copssh/"/>
    <id>http://cxinxian.github.io/2016/08/07/git-copssh/</id>
    <published>2016-08-07T14:35:00.000Z</published>
    <updated>2021-06-05T00:47:15.830Z</updated>
    
    <content type="html"><![CDATA[<p>前几天因开发需要，出现代码管理问题，考虑到github上托管私有代码要收费等问题<br>于是就动手开始研究搭建公司内网的git仓库，已经搭建好了，现在就和大家分享下我的搭建过程以及心得体会。</p><span id="more"></span><h3 id="所需软件及下载和安装"><a href="#所需软件及下载和安装" class="headerlink" title="所需软件及下载和安装"></a>所需软件及下载和安装</h3><p><a href="https://git-for-windows.github.io/">git(客户端和服务端都需要安装)</a><br><a href="https://www.itefix.net/copssh">copssh(安装在服务端)</a><br>至于git的安装不作详细的赘述了,可自行百度，其中要说的主要就是要记得在系统环境变量中作配置如（图1）</p><p><img src="/assets/blogImg/git-copssh/git-global-config.png" alt="图1"></p><p>安装完git和配置好之后接着就着重说下copssh的安装和配置</p><h4 id="copssh安装"><a href="#copssh安装" class="headerlink" title="copssh安装"></a>copssh安装</h4><p>下载好了copssh的安装包后直接双击安装后就弹出如（图2）的界面</p><p><img src="/assets/blogImg/git-copssh/copssh_install_1.png" alt="图2"></p><p>选好要按装的目录后就配置CopSSH默认的帐号密码如（图3）</p><p>（这一步会在你的电脑新增一个管理员帐号，这些参数就是管理员的用户名和密码，而且以后基本上是不会用到的）</p><p><img src="/assets/blogImg/git-copssh/copssh_install_2.png" alt="图3"></p><p>a、copssh安装完成后在开始面板中打开copssh</p><p><img src="/assets/blogImg/git-copssh/copssh_config.png" alt="图4"></p><p>b、新增用户</p><p><img src="/assets/blogImg/git-copssh/copssh_config_1.png" alt="图5"></p><p>c、选择用户(可以是当前系统用户，本例就选着刚安装copssh时创建的用户吧)</p><p><img src="/assets/blogImg/git-copssh/copssh_config_2.png" alt="图6"></p><p>d、接着就是默认好了</p><p><img src="/assets/blogImg/git-copssh/copssh_config_3.png" alt="图7"><br>e、公钥配置：公钥存放地点在copssh的安装路径下如：D:\copssh\ICW\home\git.ssh\，新建一个文件叫authorized_keys，用任意一个文件编辑器打开，把公钥拷贝进去即可。拷贝进去的公钥就会显示出来（图8）<br><img src="/assets/blogImg/git-copssh/copssh_config_key.png" alt="图8"></p><p>还有另外一种添加公钥的方式是点击add按钮产生密钥(此出省略几张图)<br><img src="/assets/blogImg/git-copssh/copssh_config_key_1.png" alt="图9"><br>然后你会发现在你的copssh的用户目录中发现产生一个密钥<br><img src="/assets/blogImg/git-copssh/copssh_config_key_3.png" alt="图10"><br>此时打开.ssh目录下的authorized_keys文件你会发现多了一个公钥<br><img src="/assets/blogImg/git-copssh/copssh_config_key_2.png" alt="图11"><br>在服务端产生了公钥之后接着就是在客户端配置私钥：<br>1、把服务端的私钥拷贝到客户端<br>2、客户端中，使用puttygen.exe加载私钥产生对应的公钥并保存</p><p>在配置完所有的信息后就可以用git base输入<br><code>ssh git@192.168.0.0</code><br>git是copssh中配置的用户名，192.168.0.0是IP地址</p><p>在登录成功后，若发现git命令行不起作用可做如下图操作<br><img src="/assets/blogImg/git-copssh/copssh_config_git.png" alt="图12"><br>1、打开copssh安装目录下的etc文件夹中的profile文件<br>2、添加<br><code>:/cygdrive/d/Git/bin:/cygdrive/d/Git/mingw64/libexec/git-core</code><br>(注意开始的分号)到变量PATH</p>]]></content>
    
    
    <summary type="html">耐心一点、坚持一点、总会有收获</summary>
    
    
    
    
    <category term="git" scheme="http://cxinxian.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Hexo + github + Coding 搭建个人博客快速入门</title>
    <link href="http://cxinxian.github.io/2016/06/03/hello-world/"/>
    <id>http://cxinxian.github.io/2016/06/03/hello-world/</id>
    <published>2016-06-02T16:13:00.000Z</published>
    <updated>2021-06-05T15:26:42.342Z</updated>
    
    <content type="html"><![CDATA[<p>从网上搜到大神的博客，看到觉得很好看，非常简洁，于是乎我也弄了一个个人博客，在此感谢大神门的热心分享。在我个人看来，只要引起我的兴趣的东西我都会去尝试一下，还好花的时间也不算很多，现在想想感觉弄这样的一个博客也不是很难，只要多花点心思就好了。</p><span id="more"></span><h3 id="一、关于Hexo的介绍"><a href="#一、关于Hexo的介绍" class="headerlink" title="一、关于Hexo的介绍"></a>一、关于Hexo的介绍</h3><p>Hexo 是一个基于Node.js的快速、简洁且高效的静态博客框架,<br>使用Markdown来编写文章，通过Hexo生成静态网页，最后部署到服务器上。</p><h3 id="二、环境准备"><a href="#二、环境准备" class="headerlink" title="二、环境准备"></a>二、环境准备</h3><ul><li>安装 <a href="https://nodejs.org/en/">node.js</a></li><li>安装 <a href="http://git-scm.com/download">Git</a><br>  作用：是把本地的Hexo生成的静态博客提交到github或者Coding上去</li></ul><h3 id="三、安装Hexo"><a href="#三、安装Hexo" class="headerlink" title="三、安装Hexo"></a>三、安装Hexo</h3><p>在安装完以上两个软件后，再你喜爱的文件夹内(如：E:\hexo)右键选择Git Bash here然后输入以下指令<br><code>$ npm install hexo -g</code><br>接着便是执行初始化指令，Hexo 即会自动在目标文件夹建立网站所需要的所有文件<br><code>$ hexo init</code><br>安装依赖包:<br><code>$ npm install</code><br>当初始化工作完成后，便可执行下面的指令了, <code>hexo g</code> 先是把Markdown文件生成静态网页，此时你会看到当前目录下会多出一个public文件夹;<br>而 <code>hexo s</code> 则是启动本地服务器，进行文章预览调试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure><p>此时在浏览器输入：<a href="http://localhost:4000/">http://localhost:4000</a> 就可以在本地预览你的个人博客了</p><h3 id="四、提交把博客到Github和Coding-平台"><a href="#四、提交把博客到Github和Coding-平台" class="headerlink" title="四、提交把博客到Github和Coding 平台"></a>四、提交把博客到Github和Coding 平台</h3><p>（注：前提条件是在这两个平台都有账号，如果没有可以自行注册）</p><h5 id="Github-创建Repository"><a href="#Github-创建Repository" class="headerlink" title="Github 创建Repository"></a>Github 创建Repository</h5><p>建立仓库，仓库名如【your_user_name.github.io】如图1所示<br><img src="/assets/blogImg/hello-world/git_repository.png" alt="图1"></p><h5 id="Coding-创建Repository"><a href="#Coding-创建Repository" class="headerlink" title="Coding 创建Repository"></a><a href="https://coding.net/">Coding</a> 创建Repository</h5><p>如图2所示创建项目<br><img src="/assets/blogImg/hello-world/git_coding.png" alt="图2"></p><h3 id="五、部署本地文件到github和Coding"><a href="#五、部署本地文件到github和Coding" class="headerlink" title="五、部署本地文件到github和Coding"></a>五、部署本地文件到github和Coding</h3><p>找到hexo目录下站点配置文件 _config.yml并保存<br>在_config.yml最下方，添加如下配置(注：hexo的配置文件中任何’:’后面都是带一个空格的)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy: </span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: </span><br><span class="line">    github: git@github.com:username/username.github.io.git,master</span><br><span class="line">    coding: git@git.coding.net:username/username.git,master</span><br></pre></td></tr></table></figure><p>如果你没有配置过ssh公钥，则可能需要配置一下:<br>具体参考一下<a href="http://jingyan.baidu.com/article/a65957f4e91ccf24e77f9b11.html">github ssh配置</a><br>同理Coding的ssh配置和github差不多。</p><h3 id="部署到github和Coding上"><a href="#部署到github和Coding上" class="headerlink" title="部署到github和Coding上"></a>部署到github和Coding上</h3><p>再部署之前，先安装一下hexo-deployer-git这个模块：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>SSH公钥配置好了以后，执行以下命令部署到Github和Coding上</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">生命在于折腾，花多点耐心，多点坚持，折腾出一个Hexo blog 总会有收获。给Hexo点赞。</summary>
    
    
    
    
    <category term="hexo blog" scheme="http://cxinxian.github.io/tags/hexo-blog/"/>
    
  </entry>
  
</feed>
